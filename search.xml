<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://yujintang.github.io/2017/08/31/#git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>#git版本控制学习</p>
<h2 id="版本库"><a href="#版本库" class="headerlink" title="版本库"></a>版本库</h2><p><img src="https://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0" alt=""></p>
<h2 id="1-创建仓库。"><a href="#1-创建仓库。" class="headerlink" title="1.创建仓库。"></a>1.创建仓库。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<h2 id="2-添加文件到git仓库"><a href="#2-添加文件到git仓库" class="headerlink" title="2.添加文件到git仓库"></a>2.添加文件到git仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git add &lt;file&gt; #添加到暂存区</div><div class="line">git commit #添加提交备注</div><div class="line">git commit --amend #修改提交备注</div></pre></td></tr></table></figure>
<h2 id="3-查看工作区状态"><a href="#3-查看工作区状态" class="headerlink" title="3.查看工作区状态"></a>3.查看工作区状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git status</div></pre></td></tr></table></figure>
<h2 id="4-查看内容"><a href="#4-查看内容" class="headerlink" title="4.查看内容"></a>4.查看内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git diff</div></pre></td></tr></table></figure>
<h2 id="5-查看历史记录"><a href="#5-查看历史记录" class="headerlink" title="5.查看历史记录"></a>5.查看历史记录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git log  #查看提交历史</div><div class="line">git log --pretty=oneline</div><div class="line">git reflog #查看命令历史</div><div class="line">git log --graph #查看分支合并图</div></pre></td></tr></table></figure>
<h2 id="6-时光穿梭机"><a href="#6-时光穿梭机" class="headerlink" title="6.时光穿梭机"></a>6.时光穿梭机</h2><p><strong>Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，也就是最新的提交3628164…882e1e0（注意我的提交ID和你的肯定不一样），上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100， 或者使用comment id</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git reset #没有push</div><div class="line"> 	--mixed               reset HEAD and index</div><div class="line">    --soft                reset only HEAD</div><div class="line">    --hard                reset HEAD, index and working tree</div><div class="line">    --merge               reset HEAD, index and working tree</div><div class="line">git revert #已经push用一个新提交来消除一个历史提交所做的任何修改.</div></pre></td></tr></table></figure></p>
<ol>
<li>上面我们说的如果你已经push到线上代码库, reset 删除指定commit以后,你git push可能导致一大堆冲突.但是revert 并不会.</li>
<li>如果在日后现有分支和历史分支需要合并的时候,reset 恢复部分的代码依然会出现在历史分支里.但是revert 方向提交的commit 并不会出现在历史分支里.</li>
<li>reset 是在正常的commit历史中,删除了指定的commit,这时 HEAD 是向后移动了,而 revert 是在正常的commit历史中再commit一次,只不过是反向提交,他的 HEAD 是一直向前的.<h2 id="7-丢掉工作区修改"><a href="#7-丢掉工作区修改" class="headerlink" title="7.丢掉工作区修改"></a>7.丢掉工作区修改</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- readme.txt</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="8-丢掉暂存区的修改，放到工作区"><a href="#8-丢掉暂存区的修改，放到工作区" class="headerlink" title="8.丢掉暂存区的修改，放到工作区"></a>8.丢掉暂存区的修改，放到工作区</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reset HEAD readme.txt</div></pre></td></tr></table></figure>
<h2 id="9-删除一个文件"><a href="#9-删除一个文件" class="headerlink" title="9.删除一个文件"></a>9.删除一个文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git rm text.txt</div><div class="line">git commit -m &apos;rm text.txt&apos;</div></pre></td></tr></table></figure>
<h2 id="10-关联远程库"><a href="#10-关联远程库" class="headerlink" title="10.关联远程库"></a>10.关联远程库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin git@server-name:path/repo-name.git</div></pre></td></tr></table></figure>
<h2 id="11-推送分支"><a href="#11-推送分支" class="headerlink" title="11.推送分支"></a>11.推送<name>分支</name></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git push -u origin &lt;name&gt; #第一次推送  -u 参数</div><div class="line">git push origin &lt;name&gt;</div></pre></td></tr></table></figure>
<h2 id="12-克隆一个远程库"><a href="#12-克隆一个远程库" class="headerlink" title="12. 克隆一个远程库"></a>12. 克隆一个远程库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@server-name:path/repo-name.git</div></pre></td></tr></table></figure>
<h2 id="13-查看分支"><a href="#13-查看分支" class="headerlink" title="13. 查看分支"></a>13. 查看分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch</div></pre></td></tr></table></figure>
<h2 id="14-创建分支"><a href="#14-创建分支" class="headerlink" title="14.创建分支"></a>14.创建分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout -b dev </div><div class="line">#git checkout命令加上-b参数表示创建并切换，相当于：</div><div class="line">$ git branch dev  #新增dev分支</div><div class="line">$ git checkout dev</div></pre></td></tr></table></figure>
<h2 id="15-合并某分支到当前分支"><a href="#15-合并某分支到当前分支" class="headerlink" title="15. 合并某分支到当前分支"></a>15. 合并某分支到当前分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge &lt;name&gt;</div></pre></td></tr></table></figure>
<h2 id="16-删除分支"><a href="#16-删除分支" class="headerlink" title="16.删除分支"></a>16.删除分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -d dev </div><div class="line">git branch -D &lt;name&gt; #删除一个没有被合并过的分支</div></pre></td></tr></table></figure>
<h2 id="17-解决冲突"><a href="#17-解决冲突" class="headerlink" title="17.解决冲突"></a>17.解决冲突</h2><p><strong>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容 </strong></p>
<h2 id="18-保存现场，（开发过程插入临时任务）"><a href="#18-保存现场，（开发过程插入临时任务）" class="headerlink" title="18.保存现场，（开发过程插入临时任务）"></a>18.保存现场，（开发过程插入临时任务）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git stash #存储现场</div><div class="line">git stash list #查看存储列表</div><div class="line">git stash apply #恢复场景</div><div class="line">git stash drop #删除场景</div><div class="line">git stash pop  #恢复并删除场景</div><div class="line">git stash apply stash@&#123;0&#125;恢复指定场景</div></pre></td></tr></table></figure>
<h2 id="19-多人协作"><a href="#19-多人协作" class="headerlink" title="19. 多人协作"></a>19. 多人协作</h2><ol>
<li><p>查看远程库信息，使用git remote -v；</p>
</li>
<li><p>本地新建的分支如果不推送到远程，对其他人就是不可见的；</p>
</li>
<li><p>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</p>
</li>
<li><p>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；</p>
</li>
<li><p>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin/branch-name；</p>
</li>
<li><p>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>
</li>
</ol>
<h2 id="20-标签"><a href="#20-标签" class="headerlink" title="20. 标签"></a>20. 标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git tag &lt;tagname&gt; #创建一个标签</div><div class="line">git tag &lt;tagname&gt; &lt;commit&gt; #指定commit ID 创建一个标签</div><div class="line">git tag -a &lt;tagname&gt; -m &quot;创建标签&quot; #指定标签信息</div><div class="line">git show &lt;tagname&gt; #查看某个标签详情</div><div class="line">git tag #查看所有标签</div><div class="line">git tag -n #查看所有标签与注解</div><div class="line">git push origin &lt;tagname&gt; #可以推送一个本地标签</div><div class="line">git push origin --tags  #可以推送全部未推送过的本地标签</div><div class="line">git tag -d &lt;tagname&gt; #可以删除一个本地标签</div><div class="line">git push origin :refs/tags/&lt;tagname&gt; #删除一个远程标签</div></pre></td></tr></table></figure>
<h2 id="21-根据标签创建一个分支"><a href="#21-根据标签创建一个分支" class="headerlink" title="21.根据标签创建一个分支"></a>21.根据标签创建一个分支</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch &lt;new-branch-name&gt; &lt;tag-name&gt;</div></pre></td></tr></table></figure>
<h2 id="22-归档"><a href="#22-归档" class="headerlink" title="22.归档"></a>22.归档</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git archive -o ../latest.zip HEAD #导出最新的版本库</div><div class="line">git archive -o ../git-1.4.0-docs.zip  HEAD:Documentation/ #导出一个目录</div><div class="line">git archive --format=tar --remote=git@gitlab.kmlab.com:template/saas-server.git master server/ public/ .env/ index.js | tar -xf -</div></pre></td></tr></table></figure>
<h1 id="⚠️"><a href="#⚠️" class="headerlink" title="⚠️"></a>⚠️</h1><ol>
<li>不同类别的修改 (如：Bug修复和功能添加) 要尽量分开提交，以方便以后从历史记录里查找特定的修改内容。</li>
<li>查看其他人提交的修改内容或自己的历史记录的时候，提交信息是需要用到的重要资料。所以请用心填写修改内容的提交信息，以方便别人理解。<br>以下是Git的标准注解：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">第1行：提交修改内容的摘要</div><div class="line">第2行：空行</div><div class="line">第3行以后：修改的理由</div></pre></td></tr></table></figure></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[omniplan 许可证]]></title>
      <url>https://yujintang.github.io/2017/05/08/omniplan-%E8%AE%B8%E5%8F%AF%E8%AF%81/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/28b2d21e33c4" target="_blank" rel="external"> 原地址</a></p>
<p><strong>密钥所有者都是:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youliyuan</div></pre></td></tr></table></figure></p>
<p><strong>OmniPlan 3：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HOMJ-QOJH-OIBN-TNIH-HWUN-TEEH-WUN</div><div class="line">NKWO-HVKB-JAZE-UIHH-XAVY-BEEX-AVY</div><div class="line">BCRW-MFCE-FVEX-VEBS-LNYD-PEEL-NYD</div></pre></td></tr></table></figure></p>
<p><strong>OmniPlan 3 Pro：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">CQPC-NNAM-MMMG-XYKD-IDPA-BEEI-DPA</div><div class="line">LEUG-ZSCB-WJYR-LXIK-DHXG-VEED-HXG</div><div class="line">MWCD-CCHB-DLNR-RSNF-UVBX-TEEU-VBX</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[413 request entity too large 解决]]></title>
      <url>https://yujintang.github.io/2017/03/15/413-request-entity-too-large-%E8%A7%A3%E5%86%B3/</url>
      <content type="html"><![CDATA[<h2 id="如果是nginx-问题"><a href="#如果是nginx-问题" class="headerlink" title="如果是nginx 问题"></a>如果是nginx 问题</h2><p><strong>在nginx 配置中写入</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">增加如下两行到nginx.conf的http&#123;&#125;段， 增大nginx上传文件大小限制</div><div class="line"></div><div class="line">#设置允许发布内容为8M</div><div class="line">client_max_body_size 8M;</div><div class="line">client_body_buffer_size 128k;</div></pre></td></tr></table></figure></p>
<h2 id="如果是在express中"><a href="#如果是在express中" class="headerlink" title="如果是在express中"></a>如果是在express中</h2><p><strong>使用body-parser中间件</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 定义express body 中间件</div><div class="line">app.use(bodyParser.urlencoded(&#123; extended: false , limit: &apos;8mb&apos;&#125;));</div><div class="line">app.use(bodyParser.json(&#123;limit: &apos;8mb&apos;&#125;));</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[http 状态码简单记录]]></title>
      <url>https://yujintang.github.io/2017/02/27/http%20%E7%8A%B6%E6%80%81%E7%A0%81%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="1-分类以及描述"><a href="#1-分类以及描述" class="headerlink" title="1.分类以及描述"></a>1.分类以及描述</h2><table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">分类</td>
<td style="text-align:center">分类描述</td>
</tr>
<tr>
<td style="text-align:center">1**</td>
<td style="text-align:center">信息，服务器收到请求，需要请求者继续执行操作</td>
</tr>
<tr>
<td style="text-align:center">2**</td>
<td style="text-align:center">成功，操作被成功接收并处理</td>
</tr>
<tr>
<td style="text-align:center">3**</td>
<td style="text-align:center">重定向，需要进一步的操作以完成请求</td>
</tr>
<tr>
<td style="text-align:center">4**</td>
<td style="text-align:center">客户端错误，请求包含语法错误或无法完成请求</td>
</tr>
<tr>
<td style="text-align:center">5**</td>
<td style="text-align:center">服务器错误，服务器在处理请求的过程中发生了错误</td>
</tr>
</tbody>
</table>
<h2 id="2-http-状态码简单记录"><a href="#2-http-状态码简单记录" class="headerlink" title="2.http 状态码简单记录"></a>2.http 状态码简单记录</h2><table>
<thead>
<tr>
<th style="text-align:center">码</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">100</td>
<td style="text-align:center">客户端应当继续发送请求。这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应。</td>
</tr>
<tr>
<td style="text-align:center">101</td>
<td style="text-align:center">服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。 　　只有在切换新的协议更有好处的时候才应该采取类似措施。例如，切换到新的HTTP 版本比旧版本更有优势，或者切换到一个实时且同步的协议以传送利用此类特性的资源。</td>
</tr>
<tr>
<td style="text-align:center">102</td>
<td style="text-align:center">由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。</td>
</tr>
<tr>
<td style="text-align:center">200</td>
<td style="text-align:center">请求已成功，请求所希望的响应头或数据体将随此响应返回。</td>
</tr>
<tr>
<td style="text-align:center">201</td>
<td style="text-align:center">请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 ‘202 Accepted’。</td>
</tr>
<tr>
<td style="text-align:center">202</td>
<td style="text-align:center">服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。 　　返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。</td>
</tr>
<tr>
<td style="text-align:center">203</td>
<td style="text-align:center">服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超级。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。</td>
</tr>
<tr>
<td style="text-align:center">204</td>
<td style="text-align:center">服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。 　　如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。 　　由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。</td>
</tr>
<tr>
<td style="text-align:center">205</td>
<td style="text-align:center">服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。 　　与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。</td>
</tr>
<tr>
<td style="text-align:center">206</td>
<td style="text-align:center">服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP 下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。 　　该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。 　　响应必须包含如下的头部域： 　　Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。 　　Date 　　ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。 　　Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。 　　假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。 　　任何不支持 Range 以及 Content-Range 头的缓存都禁止缓存206响应返回的内容。</td>
</tr>
<tr>
<td style="text-align:center">207</td>
<td style="text-align:center">由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。</td>
</tr>
<tr>
<td style="text-align:center">300</td>
<td style="text-align:center">被请求的资源有一系列可供选择的回馈信息，每个都有自己特定的地址和浏览器驱动的商议信息。用户或浏览器能够自行选择一个首选的地址进行重定向。 　　除非这是一个 HEAD 请求，否则该响应应当包括一个资源特性及地址的列表的实体，以便用户或浏览器从中选择最合适的重定向地址。这个实体的格式由 Content-Type 定义的格式所决定。浏览器可能根据响应的格式以及浏览器自身能力，自动作出最合适的选择。当然，RFC 2616规范并没有规定这样的自动选择该如何进行。 　　如果服务器本身已经有了首选的回馈选择，那么在 Location 中应当指明这个回馈的 URI；浏览器可能会将这个 Location 值作为自动重定向的地址。此外，除非额外指定，否则这个响应也是可缓存的。</td>
</tr>
<tr>
<td style="text-align:center">301</td>
<td style="text-align:center">被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一。如果可能，拥有链接编辑功能的客户端应当自动把请求的地址修改为从服务器反馈回来的地址。除非额外指定，否则这个响应也是可缓存的。 　　新的永久性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，因此浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：对于某些使用 HTTP/1.0 协议的浏览器，当它们发送的 POST 请求得到了一个301响应的话，接下来的重定向请求将会变成 GET 方式。</td>
</tr>
<tr>
<td style="text-align:center">302</td>
<td style="text-align:center">请求的资源现在临时从不同的 URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　如果这不是一个 GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。 　　注意：虽然RFC 1945和RFC 2068规范不允许客户端在重定向时改变请求的方法，但是很多现存的浏览器将302响应视作为303响应，并且使用 GET 方式访问在 Location 中规定的 URI，而无视原先请求的方法。状态码303和307被添加了进来，用以明确服务器期待客户端进行何种反应。</td>
</tr>
<tr>
<td style="text-align:center">303</td>
<td style="text-align:center">对应当前请求的响应可以在另一个 URI 上被找到，而且客户端应当采用 GET 的方式访问那个资源。这个方法的存在主要是为了允许由脚本激活的POST请求输出重定向到一个新的资源。这个新的 URI 不是原始资源的替代引用。同时，303响应禁止被缓存。当然，第二个请求（重定向）可能被缓存。 　　新的 URI 应当在响应的 Location 域中返回。除非这是一个 HEAD 请求，否则响应的实体中应当包含指向新的 URI 的超链接及简短说明。 　　注意：许多 HTTP/1.1 版以前的 浏览器不能正确理解303状态。如果需要考虑与这些浏览器之间的互动，302状态码应该可以胜任，因为大多数的浏览器处理302响应时的方式恰恰就是上述规范要求客户端处理303响应时应当做的。</td>
</tr>
<tr>
<td style="text-align:center">304</td>
<td style="text-align:center">如果客户端发送了一个带条件的 GET 请求且该请求已被允许，而文档的内容（自上次访问以来或者根据请求的条件）并没有改变，则服务器应当返回这个状态码。304响应禁止包含消息体，因此始终以消息头后的第一个空行结尾。 　　该响应必须包含以下的头信息： 　　Date，除非这个服务器没有时钟。假如没有时钟的服务器也遵守这些规则，那么代理服务器以及客户端可以自行将 Date 字段添加到接收到的响应头中去（正如RFC 2068中规定的一样），缓存机制将会正常工作。 　　ETag 和/或 Content-Location，假如同样的请求本应返回200响应。 　　Expires, Cache-Control，和/或Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。 　　假如本响应请求使用了强缓存验证，那么本次响应不应该包含其他实体头；否则（例如，某个带条件的 GET 请求使用了弱缓存验证），本次响应禁止包含其他实体头；这避免了缓存了的实体内容和更新了的实体头信息之间的不一致。 　　假如某个304响应指明了当前某个实体没有缓存，那么缓存系统必须忽视这个响应，并且重复发送不包含限制条件的请求。 　　假如接收到一个要求更新某个缓存条目的304响应，那么缓存系统必须更新整个条目以反映所有在响应中被更新的字段的值。</td>
</tr>
<tr>
<td style="text-align:center">305</td>
<td style="text-align:center">被请求的资源必须通过指定的代理才能被访问。Location 域中将给出指定的代理所在的 URI 信息，接收者需要重复发送一个单独的请求，通过这个代理才能访问相应资源。只有原始服务器才能建立305响应。 　　注意：RFC 2068中没有明确305响应是为了重定向一个单独的请求，而且只能被原始服务器建立。忽视这些限制可能导致严重的安全后果。</td>
</tr>
<tr>
<td style="text-align:center">306</td>
<td style="text-align:center">在最新版的规范中，306状态码已经不再被使用。</td>
</tr>
<tr>
<td style="text-align:center">307</td>
<td style="text-align:center">请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求。只有在Cache-Control或Expires中进行了指定的情况下，这个响应才是可缓存的。 　　新的临时性的URI 应当在响应的 Location 域中返回。除非这是一个HEAD 请求，否则响应的实体中应当包含指向新的URI 的超链接及简短说明。因为部分浏览器不能识别307响应，因此需要添加上述必要信息以便用户能够理解并向新的 URI 发出访问请求。 　　如果这不是一个GET 或者 HEAD 请求，那么浏览器禁止自动进行重定向，除非得到用户的确认，因为请求的条件可能因此发生变化。</td>
</tr>
<tr>
<td style="text-align:center">400</td>
<td style="text-align:center">1、语义有误，当前请求无法被服务器理解。除非进行修改，否则客户端不应该重复提交这个请求。 　　2、请求参数有误。</td>
</tr>
<tr>
<td style="text-align:center">401</td>
<td style="text-align:center">当前请求需要用户验证。该响应必须包含一个适用于被请求资源的 WWW-Authenticate 信息头用以询问用户信息。客户端可以重复提交一个包含恰当的 Authorization 头信息的请求。如果当前请求已经包含了 Authorization 证书，那么401响应代表着服务器验证已经拒绝了那些证书。如果401响应包含了与前一个响应相同的身份验证询问，且浏览器已经至少尝试了一次验证，那么浏览器应当向用户展示响应中包含的实体信息，因为这个实体信息中可能包含了相关诊断信息。参见RFC 2617。</td>
</tr>
<tr>
<td style="text-align:center">402</td>
<td style="text-align:center">该状态码是为了将来可能的需求而预留的。</td>
</tr>
<tr>
<td style="text-align:center">403</td>
<td style="text-align:center">服务器已经理解请求，但是拒绝执行它。与401响应不同的是，身份验证并不能提供任何帮助，而且这个请求也不应该被重复提交。如果这不是一个 HEAD 请求，而且服务器希望能够讲清楚为何请求不能被执行，那么就应该在实体内描述拒绝的原因。当然服务器也可以返回一个404响应，假如它不希望让客户端获得任何信息。</td>
</tr>
<tr>
<td style="text-align:center">404</td>
<td style="text-align:center">请求失败，请求所希望得到的资源未被在服务器上发现。没有信息能够告诉用户这个状况到底是暂时的还是永久的。假如服务器知道情况的话，应当使用410状态码来告知旧资源因为某些内部的配置机制问题，已经永久的不可用，而且没有任何可以跳转的地址。404这个状态码被广泛应用于当服务器不想揭示到底为何请求被拒绝或者没有其他适合的响应可用的情况下。</td>
</tr>
<tr>
<td style="text-align:center">405</td>
<td style="text-align:center">请求行中指定的请求方法不能被用于请求相应的资源。该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。 　　鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</td>
</tr>
<tr>
<td style="text-align:center">406</td>
<td style="text-align:center">请求的资源的内容特性无法满足请求头中的条件，因而无法生成响应实体。 　　除非这是一个 HEAD 请求，否则该响应就应当返回一个包含可以让用户或者浏览器从中选择最合适的实体特性以及地址列表的实体。实体的格式由 Content-Type 头中定义的媒体类型决定。浏览器可以根据格式及自身能力自行作出最佳选择。但是，规范中并没有定义任何作出此类自动选择的标准。</td>
</tr>
<tr>
<td style="text-align:center">407</td>
<td style="text-align:center">与401响应类似，只不过客户端必须在代理服务器上进行身份验证。代理服务器必须返回一个 Proxy-Authenticate 用以进行身份询问。客户端可以返回一个 Proxy-Authorization 信息头用以验证。参见RFC 2617。</td>
</tr>
<tr>
<td style="text-align:center">408</td>
<td style="text-align:center">请求超时。客户端没有在服务器预备等待的时间内完成一个请求的发送。客户端可以随时再次提交这一请求而无需进行任何更改。</td>
</tr>
<tr>
<td style="text-align:center">409</td>
<td style="text-align:center">由于和被请求的资源的当前状态之间存在冲突，请求无法完成。这个代码只允许用在这样的情况下才能被使用：用户被认为能够解决冲突，并且会重新提交新的请求。该响应应当包含足够的信息以便用户发现冲突的源头。 　　冲突通常发生于对 PUT 请求的处理中。例如，在采用版本检查的环境下，某次 PUT 提交的对特定资源的修改请求所附带的版本信息与之前的某个（第三方）请求向冲突，那么此时服务器就应该返回一个409错误，告知用户请求无法完成。此时，响应实体中很可能会包含两个冲突版本之间的差异比较，以便用户重新提交归并以后的新版本。</td>
</tr>
<tr>
<td style="text-align:center">410</td>
<td style="text-align:center">被请求的资源在服务器上已经不再可用，而且没有任何已知的转发地址。这样的状况应当被认为是永久性的。如果可能，拥有链接编辑功能的客户端应当在获得用户许可后删除所有指向这个地址的引用。如果服务器不知道或者无法确定这个状况是否是永久的，那么就应该使用404状态码。除非额外说明，否则这个响应是可缓存的。 　　410响应的目的主要是帮助网站管理员维护网站，通知用户该资源已经不再可用，并且服务器拥有者希望所有指向这个资源的远端连接也被删除。这类事件在限时、增值服务中很普遍。同样，410响应也被用于通知客户端在当前服务器站点上，原本属于某个个人的资源已经不再可用。当然，是否需要把所有永久不可用的资源标记为’410 Gone’，以及是否需要保持此标记多长时间，完全取决于服务器拥有者。</td>
</tr>
<tr>
<td style="text-align:center">411</td>
<td style="text-align:center">服务器拒绝在没有定义 Content-Length 头的情况下接受请求。在添加了表明请求消息体长度的有效 Content-Length 头之后，客户端可以再次提交该请求。</td>
</tr>
<tr>
<td style="text-align:center">412</td>
<td style="text-align:center">服务器在验证在请求的头字段中给出先决条件时，没能满足其中的一个或多个。这个状态码允许客户端在获取资源时在请求的元信息（请求头字段数据）中设置先决条件，以此避免该请求方法被应用到其希望的内容以外的资源上。</td>
</tr>
<tr>
<td style="text-align:center">413</td>
<td style="text-align:center">服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。 　　如果这个状况是临时的，服务器应当返回一个 Retry-After 的响应头，以告知客户端可以在多少时间以后重新尝试。</td>
</tr>
<tr>
<td style="text-align:center">414</td>
<td style="text-align:center">请求的URI 长度超过了服务器能够解释的长度，因此服务器拒绝对该请求提供服务。这比较少见，通常的情况包括： 　　本应使用POST方法的表单提交变成了GET方法，导致查询字符串（Query String）过长。 　　重定向URI “黑洞”，例如每次重定向把旧的 URI 作为新的 URI 的一部分，导致在若干次重定向后 URI 超长。 　　客户端正在尝试利用某些服务器中存在的安全漏洞攻击服务器。这类服务器使用固定长度的缓冲读取或操作请求的 URI，当 GET 后的参数超过某个数值后，可能会产生缓冲区溢出，导致任意代码被执行[1]。没有此类漏洞的服务器，应当返回414状态码。</td>
</tr>
<tr>
<td style="text-align:center">415</td>
<td style="text-align:center">对于当前请求的方法和所请求的资源，请求中提交的实体并不是服务器中所支持的格式，因此请求被拒绝。</td>
</tr>
<tr>
<td style="text-align:center">416</td>
<td style="text-align:center">如果请求中包含了 Range 请求头，并且 Range 中指定的任何数据范围都与当前资源的可用范围不重合，同时请求中又没有定义 If-Range 请求头，那么服务器就应当返回416状态码。 　　假如 Range 使用的是字节范围，那么这种情况就是指请求指定的所有数据范围的首字节位置都超过了当前资源的长度。服务器也应当在返回416状态码的同时，包含一个 Content-Range 实体头，用以指明当前资源的长度。这个响应也被禁止使用 multipart/byteranges 作为其 Content-Type。</td>
</tr>
<tr>
<td style="text-align:center">417</td>
<td style="text-align:center">在请求头 Expect 中指定的预期内容无法被服务器满足，或者这个服务器是一个代理服务器，它有明显的证据证明在当前路由的下一个节点上，Expect 的内容无法被满足。</td>
</tr>
<tr>
<td style="text-align:center">421</td>
<td style="text-align:center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>
</tr>
<tr>
<td style="text-align:center">422</td>
<td style="text-align:center">从当前客户端所在的IP地址到服务器的连接数超过了服务器许可的最大范围。通常，这里的IP地址指的是从服务器上看到的客户端地址（比如用户的网关或者代理服务器地址）。在这种情况下，连接数的计算可能涉及到不止一个终端用户。</td>
</tr>
<tr>
<td style="text-align:center">422</td>
<td style="text-align:center">请求格式正确，但是由于含有语义错误，无法响应。（RFC 4918 WebDAV）423 Locked 　　当前资源被锁定。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td style="text-align:center">424</td>
<td style="text-align:center">由于之前的某个请求发生的错误，导致当前请求失败，例如 PROPPATCH。（RFC 4918 WebDAV）</td>
</tr>
<tr>
<td style="text-align:center">425</td>
<td style="text-align:center">在WebDav Advanced Collections 草案中定义，但是未出现在《WebDAV 顺序集协议》（RFC 3658）中。</td>
</tr>
<tr>
<td style="text-align:center">426</td>
<td style="text-align:center">客户端应当切换到TLS/1.0。（RFC 2817）</td>
</tr>
<tr>
<td style="text-align:center">449</td>
<td style="text-align:center">由微软扩展，代表请求应当在执行完适当的操作后进行重试。</td>
</tr>
<tr>
<td style="text-align:center">500</td>
<td style="text-align:center">服务器遇到了一个未曾预料的状况，导致了它无法完成对请求的处理。一般来说，这个问题都会在服务器的程序码出错时出现。</td>
</tr>
<tr>
<td style="text-align:center">501</td>
<td style="text-align:center">服务器不支持当前请求所需要的某个功能。当服务器无法识别请求的方法，并且无法支持其对任何资源的请求。</td>
</tr>
<tr>
<td style="text-align:center">502</td>
<td style="text-align:center">作为网关或者代理工作的服务器尝试执行请求时，从上游服务器接收到无效的响应。</td>
</tr>
<tr>
<td style="text-align:center">503</td>
<td style="text-align:center">由于临时的服务器维护或者过载，服务器当前无法处理请求。这个状况是临时的，并且将在一段时间以后恢复。如果能够预计延迟时间，那么响应中可以包含一个 Retry-After 头用以标明这个延迟时间。如果没有给出这个 Retry-After 信息，那么客户端应当以处理500响应的方式处理它。 　　注意：503状态码的存在并不意味着服务器在过载的时候必须使用它。某些服务器只不过是希望拒绝客户端的连接。</td>
</tr>
<tr>
<td style="text-align:center">504</td>
<td style="text-align:center">作为网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器（URI标识出的服务器，例如HTTP、FTP、LDAP）或者辅助服务器（例如DNS）收到响应。 　　注意：某些代理服务器在DNS查询超时时会返回400或者500错误</td>
</tr>
<tr>
<td style="text-align:center">505</td>
<td style="text-align:center">服务器不支持，或者拒绝支持在请求中使用的 HTTP 版本。这暗示着服务器不能或不愿使用与客户端相同的版本。响应中应当包含一个描述了为何版本不被支持以及服务器支持哪些协议的实体。</td>
</tr>
<tr>
<td style="text-align:center">506</td>
<td style="text-align:center">由《透明内容协商协议》（RFC 2295）扩展，代表服务器存在内部配置错误：被请求的协商变元资源被配置为在透明内容协商中使用自己，因此在一个协商处理中不是一个合适的重点。</td>
</tr>
<tr>
<td style="text-align:center">507</td>
<td style="text-align:center">服务器无法存储完成请求所必须的内容。这个状况被认为是临时的。WebDAV (RFC 4918)</td>
</tr>
<tr>
<td style="text-align:center">509</td>
<td style="text-align:center">服务器达到带宽限制。这不是一个官方的状态码，但是仍被广泛使用。</td>
</tr>
<tr>
<td style="text-align:center">510</td>
<td style="text-align:center">获取资源所需要的策略并没有没满足。（RFC 2774）</td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos7 systemctl 与firewalld 的使用]]></title>
      <url>https://yujintang.github.io/2017/02/09/centos7-firewalld-%E9%98%B2%E7%81%AB%E5%A2%99%E8%AE%BE%E7%BD%AE/</url>
      <content type="html"><![CDATA[<h3 id="1-firewalld的基本使用"><a href="#1-firewalld的基本使用" class="headerlink" title="1.firewalld的基本使用"></a>1.firewalld的基本使用</h3><p>启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure></p>
<p>查看状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld</div></pre></td></tr></table></figure></p>
<p>停止：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl disable firewalld</div></pre></td></tr></table></figure></p>
<p>禁用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld</div></pre></td></tr></table></figure></p>
<h3 id="2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"><a href="#2-systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。" class="headerlink" title="2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。"></a>2.systemctl是CentOS7的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。</h3><p>启动一个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld.service</div></pre></td></tr></table></figure></p>
<p>关闭一个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl stop firewalld.service</div></pre></td></tr></table></figure></p>
<p>重启一个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl restart firewalld.service</div></pre></td></tr></table></figure></p>
<p>显示一个服务的状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl status firewalld.service</div></pre></td></tr></table></figure></p>
<p>在开机时启用一个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld.service</div></pre></td></tr></table></figure></p>
<p>在开机时禁用一个服务：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl disable firewalld.service</div></pre></td></tr></table></figure></p>
<p>查看服务是否开机启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl is-enabled firewalld.service</div></pre></td></tr></table></figure></p>
<p>查看已启动的服务列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl list-unit-files|grep enabled</div></pre></td></tr></table></figure></p>
<p>查看启动失败的服务列表：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl --failed</div></pre></td></tr></table></figure></p>
<h3 id="3-配置firewalld-cmd"><a href="#3-配置firewalld-cmd" class="headerlink" title="3.配置firewalld-cmd"></a>3.配置firewalld-cmd</h3><p>查看版本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --version</div></pre></td></tr></table></figure></p>
<p>查看帮助：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --help</div></pre></td></tr></table></figure></p>
<p>显示状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --state</div></pre></td></tr></table></figure></p>
<p>查看所有打开的端口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --list-ports</div></pre></td></tr></table></figure></p>
<p>更新防火墙规则：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>查看区域信息:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --get-active-zones</div></pre></td></tr></table></figure></p>
<p>查看指定接口所属区域： <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --get-zone-of-interface=eth0</div></pre></td></tr></table></figure></p>
<p>拒绝所有包：<br>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --panic-on</div></pre></td></tr></table></figure></p>
<p>取消拒绝状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --panic-off</div></pre></td></tr></table></figure></p>
<p>查看是否拒绝：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --query-panic</div></pre></td></tr></table></figure></p>
<h3 id="4-开启与关闭一个端口"><a href="#4-开启与关闭一个端口" class="headerlink" title="4.开启与关闭一个端口"></a>4.开启与关闭一个端口</h3><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</div></pre></td></tr></table></figure></p>
<p>重新载入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --reload</div></pre></td></tr></table></figure></p>
<p>查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone= public --query-port=80/tcp</div></pre></td></tr></table></figure></p>
<p>删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[“将程序部署到docker里面”]]></title>
      <url>https://yujintang.github.io/2016/12/09/%E2%80%9C%E5%B0%86%E7%A8%8B%E5%BA%8F%E9%83%A8%E7%BD%B2%E5%88%B0docker%E9%87%8C%E9%9D%A2%E2%80%9D/</url>
      <content type="html"><![CDATA[<h1 id="redis-安装"><a href="#redis-安装" class="headerlink" title="redis 安装"></a>redis 安装</h1><h2 id="1-下载官方镜像"><a href="#1-下载官方镜像" class="headerlink" title="1. 下载官方镜像"></a>1. 下载官方镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull redis:latest</div></pre></td></tr></table></figure>
<h2 id="2-运行redis"><a href="#2-运行redis" class="headerlink" title="2.运行redis"></a>2.运行redis</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name myRedis -d redis</div></pre></td></tr></table></figure>
<h2 id="3-运行一个redis终端"><a href="#3-运行一个redis终端" class="headerlink" title="3.运行一个redis终端"></a>3.运行一个redis终端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --link myRedis:redis --rm redis redis-cli -h redis -p 6379</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://hub.docker.com/_/redis/" target="_blank" rel="external">redis Image</a></li>
</ul>
<h1 id="postgresql-安装"><a href="#postgresql-安装" class="headerlink" title="postgresql 安装"></a>postgresql 安装</h1><h2 id="1-下载官方镜像-1"><a href="#1-下载官方镜像-1" class="headerlink" title="1.下载官方镜像"></a>1.下载官方镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull postgres:latest</div></pre></td></tr></table></figure>
<h2 id="2-运行postgresql"><a href="#2-运行postgresql" class="headerlink" title="2.运行postgresql"></a>2.运行postgresql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run --name myPG -e POSTGRES_PASSWORD=mysecretpassword -d postgres</div></pre></td></tr></table></figure>
<h2 id="3-运行一个postgresql终端"><a href="#3-运行一个postgresql终端" class="headerlink" title="3.运行一个postgresql终端"></a>3.运行一个postgresql终端</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm --link myPG:postgres postgres psql -h postgres -U postgres</div><div class="line">psql (9.5.0)</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://hub.docker.com/_/postgres/" target="_blank" rel="external">Postres Image</a></li>
</ul>
<h1 id="程序运行环境"><a href="#程序运行环境" class="headerlink" title="程序运行环境"></a>程序运行环境</h1><h2 id="1-Dockerfile-文件"><a href="#1-Dockerfile-文件" class="headerlink" title="1.Dockerfile 文件"></a>1.Dockerfile 文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FROM node</div><div class="line"></div><div class="line">RUN mkdir -p /opt/hema-img/appimg</div><div class="line">WORKDIR /code/hema-back</div><div class="line"></div><div class="line">EXPOSE 3150</div><div class="line"></div><div class="line">CMD node index.js</div></pre></td></tr></table></figure>
<h2 id="2-创建Images"><a href="#2-创建Images" class="headerlink" title="2.创建Images"></a>2.创建Images</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker build -t hema:v1 ./</div></pre></td></tr></table></figure>
<h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  host = `pg`;</div><div class="line">      port = 5432;</div><div class="line">      database = `hema`;</div><div class="line">      username = `postgres`;</div><div class="line">      password = `mysecretpassword`;</div><div class="line">      redisHost = `rds`;</div><div class="line">      redisPort = 6379</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-开启一个容器"><a href="#4-开启一个容器" class="headerlink" title="4.开启一个容器"></a>4.开启一个容器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d --restart=&quot;always&quot; --link myPG:pg --link myRedis:rds -p 3150:3150 --name hema_back -v /Users/yujintang/Documents/Kitematic/hema_back/code/:/code hema:v1</div></pre></td></tr></table></figure>
<h2 id="5-etc-hosts-文件内容"><a href="#5-etc-hosts-文件内容" class="headerlink" title="5. /etc/hosts 文件内容"></a>5. /etc/hosts 文件内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">127.0.0.1	localhost</div><div class="line">::1	localhost ip6-localhost ip6-loopback</div><div class="line">fe00::0	ip6-localnet</div><div class="line">ff00::0	ip6-mcastprefix</div><div class="line">ff02::1	ip6-allnodes</div><div class="line">ff02::2	ip6-allrouters</div><div class="line">172.17.0.2	pg e4436a9e80ac myPG</div><div class="line">172.17.0.3	rds fc0b8d5b271a myRedis</div><div class="line">172.17.0.4	4e10a378dba6</div></pre></td></tr></table></figure>
<h2 id="6-查看端口占用"><a href="#6-查看端口占用" class="headerlink" title="6.查看端口占用"></a>6.查看端口占用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lsof -n -P -i TCP -s TCP:LISTEN | grep 3150 | awk &apos;&#123;print $1,$2,$9&#125;&apos;</div><div class="line">com.docke 90186 *:3150</div><div class="line">com.docke 90186 [::1]:3150</div></pre></td></tr></table></figure>
<ul>
<li>docker 映射只绑定127.0.0.1端口，所以这个时候我们在宿主机再开启一个3150端口应用，还是可以的，但是反过来就不可以。<br>node 开启一个3150 端口应用后查看端口占用：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lsof -n -P -i TCP -s TCP:LISTEN | grep 3150 | awk &apos;&#123;print $1,$2,$9&#125;&apos;</div><div class="line">com.docke 90186 *:3150</div><div class="line">com.docke 90186 [::1]:3150</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js 判断对象是否拥有某属性]]></title>
      <url>https://yujintang.github.io/2016/12/06/js%20%E5%88%A4%E6%96%AD%E5%AF%B9%E8%B1%A1%E6%98%AF%E5%90%A6%E6%8B%A5%E6%9C%89%E6%9F%90%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h3 id="1-in-运算符"><a href="#1-in-运算符" class="headerlink" title="1. in 运算符"></a>1. in 运算符</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;name:<span class="string">'jack'</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'name'</span> <span class="keyword">in</span> obj); 		<span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'toString'</span> <span class="keyword">in</span> obj);		<span class="comment">//true</span></div></pre></td></tr></table></figure>
<ul>
<li>使用 in , 不管是自身的，还是原型链上的属性，都能监测到</li>
</ul>
<h3 id="2-hasOwnProperty-方法"><a href="#2-hasOwnProperty-方法" class="headerlink" title="2.hasOwnProperty 方法"></a>2.hasOwnProperty 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;name:<span class="string">'jack'</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'name'</span>));</div><div class="line"><span class="built_in">console</span>.log(obj.hasOwnProperty(<span class="string">'toString'</span>));</div></pre></td></tr></table></figure>
<ul>
<li>hasOwnProperty方法，只能监测到本身属性，无法监测到原型链的属性</li>
</ul>
<h3 id="3-for…in-Object-keys-Object-getOwnPropertyNames-遍历对象属性"><a href="#3-for…in-Object-keys-Object-getOwnPropertyNames-遍历对象属性" class="headerlink" title="3.for…in , Object.keys, Object.getOwnPropertyNames 遍历对象属性"></a>3.for…in , Object.keys, Object.getOwnPropertyNames 遍历对象属性</h3><ul>
<li>for…in 循环包括对象继承自原型对象的属性,只包括可枚举的</li>
<li>Object.keys 只包括自身的所有属性,只包括可枚举的</li>
<li>Object.getOwnPropertyNames 包括自身的所有属性<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> o = &#123;a:<span class="number">1</span>, b:<span class="number">2</span>&#125;;</div><div class="line">o.c = <span class="number">3</span>;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">'d'</span>, &#123;</div><div class="line">    value: <span class="number">4</span>,</div><div class="line">    enumerable: <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">let</span> e = &#123;e:<span class="string">'ww'</span>&#125;</div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(o,e);</div><div class="line"></div><div class="line"><span class="keyword">let</span> forArray = [];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> o)&#123;</div><div class="line">    forArray.push(i)</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(forArray);		<span class="comment">//[ 'a', 'b', 'c', 'e' ]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(o));	<span class="comment">//[ 'a', 'b', 'c' ]</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(o))	<span class="comment">//[ 'a', 'b', 'c', 'd' ]</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[es6 Set 去重]]></title>
      <url>https://yujintang.github.io/2016/12/06/es6-Set-%E5%8E%BB%E9%87%8D/</url>
      <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">SET文档</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array" target="_blank" rel="external">Array文档</a></p>
<h2 id="1-Set-用来去重，Array-from-用来转换类数组"><a href="#1-Set-用来去重，Array-from-用来转换类数组" class="headerlink" title="1. Set 用来去重，Array.from 用来转换类数组"></a>1. Set 用来去重，Array.from 用来转换类数组</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">distinct</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(distinct([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>]));    <span class="comment">//[1,2]</span></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker创建一个redis]]></title>
      <url>https://yujintang.github.io/2016/12/05/docker%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AAredis/</url>
      <content type="html"><![CDATA[<h2 id="docker-创建一个redis"><a href="#docker-创建一个redis" class="headerlink" title="docker 创建一个redis"></a>docker 创建一个redis</h2><h3 id="1-查找redis镜像"><a href="#1-查找redis镜像" class="headerlink" title="1.查找redis镜像"></a>1.查找redis镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker search redis</div></pre></td></tr></table></figure>
<h3 id="2-选取官方的redis-镜像"><a href="#2-选取官方的redis-镜像" class="headerlink" title="2.选取官方的redis 镜像"></a>2.选取官方的redis 镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker pull redis:latest</div></pre></td></tr></table></figure>
<h3 id="3-运行一个容器"><a href="#3-运行一个容器" class="headerlink" title="3. 运行一个容器"></a>3. 运行一个容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 6379:6379 --name myRedis redis:latest</div></pre></td></tr></table></figure>
<h3 id="4-查看ip地址"><a href="#4-查看ip地址" class="headerlink" title="4.查看ip地址"></a>4.查看ip地址</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; $CONTAINER_ID</div></pre></td></tr></table></figure>
<h3 id="5-进入容器，进行配置"><a href="#5-进入容器，进行配置" class="headerlink" title="5.进入容器，进行配置"></a>5.进入容器，进行配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker exec -it myRedis /bin/bash</div></pre></td></tr></table></figure>
<h2 id="⚠️"><a href="#⚠️" class="headerlink" title="⚠️"></a>⚠️</h2><p>1.docker pull 时候 没有添加版本，因为默认latest，但是会一直pull不下，添加latest后可以。<br>2.创建容器后因为ip不在一个网段，无法访问，所以索性使用 -p 去映射到本地端口。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[net模块创建一个简单的tcp服务]]></title>
      <url>https://yujintang.github.io/2016/10/24/net%E6%A8%A1%E5%9D%97%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84tcp%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h2 id="server-js"><a href="#server-js" class="headerlink" title="server.js"></a>server.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = net.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">socket</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server connected'</span>);</div><div class="line">    socket.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'server disconnected'</span>);</div><div class="line">    &#125;);</div><div class="line">    socket.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">        socket.end(<span class="string">'This message from server!'</span>);</div><div class="line">        <span class="built_in">console</span>.log(data.toString());</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">22222</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'server bound port 22222'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="client-js"><a href="#client-js" class="headerlink" title="client.js"></a>client.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> net = <span class="built_in">require</span>(<span class="string">'net'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> client = net.connect(&#123;port: <span class="number">22222</span>&#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'client connected'</span>);</div><div class="line">    client.write(<span class="string">'This message from client'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data.toString());</div><div class="line">    client.end();</div><div class="line">&#125;);</div><div class="line"></div><div class="line">client.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'client disconnected'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker下运行一个简单的Node.js程序]]></title>
      <url>https://yujintang.github.io/2016/10/21/docker%E4%B8%8B%E8%BF%90%E8%A1%8C%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84Node-js%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="创建Dockerfile文件"><a href="#创建Dockerfile文件" class="headerlink" title="创建Dockerfile文件"></a>创建Dockerfile文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># This is a comment</div><div class="line">FROM centos</div><div class="line">MAINTAINER yjt &lt;shanquan54@gmail.com&gt;</div><div class="line"></div><div class="line">RUN yum -y update</div><div class="line">RUN yum -y install epel-release</div><div class="line">RUN yum -y install npm</div><div class="line"></div><div class="line">RUN mkdir /var/www</div><div class="line">WORKDIR /var/www</div><div class="line">ADD ./app.js /var/www/app.js</div><div class="line"></div><div class="line">CMD [&quot;/usr/bin/node&quot;, &quot;/var/www/app.js&quot;]</div></pre></td></tr></table></figure>
<h2 id="编写app-js"><a href="#编写app-js" class="headerlink" title="编写app.js"></a>编写app.js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.end(<span class="string">'helo world!'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">server.listen(<span class="number">3000</span>);</div></pre></td></tr></table></figure>
<h2 id="docker创建镜像"><a href="#docker创建镜像" class="headerlink" title="docker创建镜像"></a>docker创建镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker build -t yjt/nodejs:v1 ./</div></pre></td></tr></table></figure>
<ol>
<li>-t 参数：为镜像打一个tag</li>
<li>yjt/nodejs： 镜像存放处</li>
<li>v1： tag</li>
<li>./ ：Dockerfile存放目录<h2 id="查看一下创建好的镜像"><a href="#查看一下创建好的镜像" class="headerlink" title="查看一下创建好的镜像"></a>查看一下创建好的镜像</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker images                </div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">yjt/nodejs          v1                  1d2a583903fd        3 minutes ago       651.5 MB</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run  -d -p 22222:3000 --name myapp yjt/nodejs:v1</div></pre></td></tr></table></figure>
<h3 id="运行并打开容器控制台"><a href="#运行并打开容器控制台" class="headerlink" title="运行并打开容器控制台"></a>运行并打开容器控制台</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker run -it -p 22222:3000 --name myapp yjt/nodejs:v1 /bin/bash</div></pre></td></tr></table></figure>
<h2 id="查看容器列表"><a href="#查看容器列表" class="headerlink" title="查看容器列表"></a>查看容器列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker ps -a</div></pre></td></tr></table></figure>
<h2 id="打开容器控制台"><a href="#打开容器控制台" class="headerlink" title="打开容器控制台"></a>打开容器控制台</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker exec -it myapp /bin/bash</div><div class="line">[root@273e8d2ac92b www]#</div></pre></td></tr></table></figure>
<h2 id="访问服务："><a href="#访问服务：" class="headerlink" title="访问服务："></a>访问服务：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl 127.0.0.1:22222</div><div class="line">hello world!</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[命令将文本复制到剪贴板]]></title>
      <url>https://yujintang.github.io/2016/10/20/%E5%91%BD%E4%BB%A4%E5%B0%86%E6%96%87%E6%9C%AC%E5%A4%8D%E5%88%B6%E5%88%B0%E5%89%AA%E8%B4%B4%E6%9D%BF/</url>
      <content type="html"><![CDATA[<h1 id="在windows下：clip"><a href="#在windows下：clip" class="headerlink" title="在windows下：clip"></a>在windows下：clip</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">echo Hello | clip  </div><div class="line"># 将字符串Hello放入Windows剪贴板  </div><div class="line">   </div><div class="line">dir | clip  </div><div class="line"># 将dir命令输出（当前目录列表）放入Windows剪贴板  </div><div class="line">   </div><div class="line">clip &lt; README.TXT    </div><div class="line"># 将readme.txt的文本放入Windows剪贴板  </div><div class="line">   </div><div class="line">echo | clip  </div><div class="line"># 将一个空行放入Windows剪贴板，即清空Windows剪贴板</div></pre></td></tr></table></figure>
<h1 id="在mac下：pbcopy"><a href="#在mac下：pbcopy" class="headerlink" title="在mac下：pbcopy"></a>在mac下：pbcopy</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cat myFile.txt | pbcopy </div><div class="line"># 将字符串myFile.txt内容放入剪贴板</div><div class="line">pbpaste &gt; file.txt </div><div class="line"># 将剪贴板的内容黏贴到file.txt</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[docker基本使用]]></title>
      <url>https://yujintang.github.io/2016/10/17/docker%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="前期安装以及注册"><a href="#前期安装以及注册" class="headerlink" title="前期安装以及注册"></a>前期安装以及注册</h2><h3 id="centos-7-安装"><a href="#centos-7-安装" class="headerlink" title="centos-7 安装"></a>centos-7 安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install docker</div></pre></td></tr></table></figure>
<h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">https://cloud.docker.com/</div></pre></td></tr></table></figure>
<h3 id="自启动服务"><a href="#自启动服务" class="headerlink" title="自启动服务"></a>自启动服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker start</div><div class="line"></div><div class="line">$ sudo chkconfig docker on</div></pre></td></tr></table></figure>
<h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo docker login</div></pre></td></tr></table></figure>
<h2 id="镜像内容"><a href="#镜像内容" class="headerlink" title="镜像内容"></a>镜像内容</h2><h3 id="查找官方镜像"><a href="#查找官方镜像" class="headerlink" title="查找官方镜像"></a>查找官方镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker search centos</div></pre></td></tr></table></figure>
<ul>
<li>NAME(名字)    DESCRIPTION(描述)    STARS(星级)    OFFICIAL(官方创建?)    AUTOMATED(自动创建?)<br><img src="2.png" alt=""><h3 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull centos</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="列出本地已有镜像"><a href="#列出本地已有镜像" class="headerlink" title="列出本地已有镜像"></a>列出本地已有镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker images</div></pre></td></tr></table></figure>
<ul>
<li>REPOSITORY(仓库源)    TAG(标记)    IMAGE ID(ID号)    CREATED(创建时间)    SIZE(大小)<br><img src="1.png" alt=""><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><h4 id="从已经创建的容器中更新镜像，并且提交这个镜像"><a href="#从已经创建的容器中更新镜像，并且提交这个镜像" class="headerlink" title="从已经创建的容器中更新镜像，并且提交这个镜像"></a>从已经创建的容器中更新镜像，并且提交这个镜像</h4></li>
<li>缺点：不容易共享开发过程<h5 id="创建一个我们想要更新的容器"><a href="#创建一个我们想要更新的容器" class="headerlink" title="创建一个我们想要更新的容器"></a>创建一个我们想要更新的容器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker run -t -i centos /bin/bash</div><div class="line">[root@c88fb5759ef5 /]#</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="我们安装一个简单的Node-js"><a href="#我们安装一个简单的Node-js" class="headerlink" title="我们安装一个简单的Node.js"></a>我们安装一个简单的Node.js</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ yum install -y epel-release</div><div class="line"></div><div class="line">$ yum install -y npm</div></pre></td></tr></table></figure>
<ul>
<li>安装npm的同时会将Node.js 同时安装<h5 id="退出该容器"><a href="#退出该容器" class="headerlink" title="退出该容器"></a>退出该容器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
</li>
</ul>
<h5 id="提交更新副本"><a href="#提交更新副本" class="headerlink" title="提交更新副本"></a>提交更新副本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker commit -m &apos;add Node.js&apos; -a &apos;shanquan54@gmail.com&apos; c88fb5759ef5 yjt/nodejs:v2</div><div class="line">sha256:2cff31857faf680209a9e2563a22a8953ba5bcdfef18292fa5c8a614621ba786</div></pre></td></tr></table></figure>
<h5 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">yjt/nodejs          v2                  2cff31857faf        15 seconds ago      441.4 MB</div><div class="line">centos              latest              980e0e4c79ec        5 weeks ago         196.8 MB</div></pre></td></tr></table></figure>
<h4 id="使用Dockerfile指令来创建一个镜像"><a href="#使用Dockerfile指令来创建一个镜像" class="headerlink" title="使用Dockerfile指令来创建一个镜像"></a>使用Dockerfile指令来创建一个镜像</h4><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir docker</div><div class="line"></div><div class="line">cd docker</div><div class="line"></div><div class="line">touch Dockerfile</div></pre></td></tr></table></figure>
<h5 id="Dockerfile指令"><a href="#Dockerfile指令" class="headerlink" title="Dockerfile指令"></a>Dockerfile指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># This is a comment                                                             </div><div class="line">FROM centos</div><div class="line">MAINTAINER yjt &lt;shanquan54@gmail.com&gt;</div><div class="line">RUN yum -y update</div><div class="line">RUN yum -y install epel-release</div><div class="line">RUN yum -y install npm</div><div class="line"># install express</div><div class="line">RUN npm install express-generator -g</div><div class="line">RUN express myapp</div><div class="line">RUN cd myapp</div><div class="line"># working dir</div><div class="line">WORKDIR /myapp</div><div class="line"># init node_modules</div><div class="line">RUN npm install</div><div class="line"># expose the default port</div><div class="line">EXPOSE 3000</div><div class="line"># env setting</div><div class="line">ENV NODE_ENV development</div></pre></td></tr></table></figure>
<h5 id="创建镜像-1"><a href="#创建镜像-1" class="headerlink" title="创建镜像"></a>创建镜像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo docker build -t test/nodejs:v1 ./</div></pre></td></tr></table></figure>
<h5 id="运行这个镜像的一个容器"><a href="#运行这个镜像的一个容器" class="headerlink" title="运行这个镜像的一个容器"></a>运行这个镜像的一个容器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker run -t -i test/nodejs:v1</div><div class="line">root@300ac9b5e3d4 myapp]#</div></pre></td></tr></table></figure>
<h3 id="存出与载入镜像"><a href="#存出与载入镜像" class="headerlink" title="存出与载入镜像"></a>存出与载入镜像</h3><h4 id="存出"><a href="#存出" class="headerlink" title="存出"></a>存出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ docker images</div><div class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</div><div class="line">centos              latest              980e0e4c79ec        6 weeks ago         196.8 MB</div><div class="line"></div><div class="line">$ docker save -o centos.tar centos</div><div class="line"></div><div class="line">$ ls</div><div class="line">centos.tar</div></pre></td></tr></table></figure>
<h4 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo docker load &lt; centos.tar </div><div class="line">Password:</div><div class="line">Loaded image: centos:latest</div></pre></td></tr></table></figure>
<h3 id="移除镜像"><a href="#移除镜像" class="headerlink" title="移除镜像"></a>移除镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rmi centos</div></pre></td></tr></table></figure>
<h3 id="移除所有镜像"><a href="#移除所有镜像" class="headerlink" title="移除所有镜像"></a>移除所有镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rmi $(docker images -q)</div></pre></td></tr></table></figure>
<ul>
<li><p>注意：在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器。</p>
<h2 id="容器内容"><a href="#容器内容" class="headerlink" title="容器内容"></a>容器内容</h2><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ docker run -t -i centos /bin/bash</div><div class="line">[root@139c5eb306f4 /]#</div></pre></td></tr></table></figure>
</li>
<li><p>启动容器的一额高base终端，允许用户交互</p>
</li>
<li>-t 选项让Docker分配一个伪终端（pseudo-tty）并绑定到容器的标准输入上</li>
<li>-i 则让容器的标准输入保持打开。<h3 id="查看容器列表"><a href="#查看容器列表" class="headerlink" title="查看容器列表"></a>查看容器列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="重新启动与终止容器"><a href="#重新启动与终止容器" class="headerlink" title="重新启动与终止容器"></a>重新启动与终止容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ docker start </div><div class="line"></div><div class="line">$ docker stop</div></pre></td></tr></table></figure>
<h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ docker run -idt centos</div><div class="line">4e2c56c09e47610675a1d8fe1c915402b332e968c4a65756306ed302abd7fb12</div><div class="line"></div><div class="line">$ docker attach 4e2c56c09e47610675a1d8fe1c915402b332e968c4a65756306ed302abd7fb12</div><div class="line">[root@4e2c56c09e47 /]#</div></pre></td></tr></table></figure>
<h3 id="导出容器"><a href="#导出容器" class="headerlink" title="导出容器"></a>导出容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker ps -a</div><div class="line">CONTAINER ID	IMAGE	COMMAND	CREATED	STATUS	PORTS	NAMES</div><div class="line">48a34bebcb59	centos	&quot;/bin/bash&quot;	7 seconds ago	Up 6 seconds	amazing_blackwell</div><div class="line"></div><div class="line">$ docker export 48a34bebcb59 &gt; centos1.tar</div></pre></td></tr></table></figure>
<h3 id="导入容器快照"><a href="#导入容器快照" class="headerlink" title="导入容器快照"></a>导入容器快照</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat centos1.tar | docker import - test/centos   </div><div class="line">sha256:b688b590d7469583d3f5771dde529de0bc094c16e5d968f62364c68e88319b32</div></pre></td></tr></table></figure>
<ul>
<li>用户既可以使用 docker load 来导入镜像存储文件到本地镜像库，也可以使用 docker import 来导入一个容器快照到本地镜像库。这两者的区别在于容器快照文件将丢弃所有的历史记录和元数据信息（即仅保存容器当时的快照状态），而镜像存储文件将保存完整记录，体积也要大。此外，从容器快照文件导入时可以重新指定标签等元数据信息。<h3 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h3><h4 id="杀死所有正在运行的容器"><a href="#杀死所有正在运行的容器" class="headerlink" title="杀死所有正在运行的容器"></a>杀死所有正在运行的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker kill $(docker ps -a -q)</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="删除所有已经停止的容器"><a href="#删除所有已经停止的容器" class="headerlink" title="删除所有已经停止的容器"></a>删除所有已经停止的容器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure>
<ul>
<li>如果要删除一个运行中的容器，可以添加 -f 参数。Docker 会发送 SIGKILL 信号给容器。</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[apt-get的使用参数]]></title>
      <url>https://yujintang.github.io/2016/10/14/apt-get%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%82%E6%95%B0/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[pgsql当前日期显示]]></title>
      <url>https://yujintang.github.io/2016/10/13/pgsql%E5%BD%93%E5%89%8D%E6%97%A5%E6%9C%9F%E6%98%BE%E7%A4%BA/</url>
      <content type="html"><![CDATA[<h2 id="pgsql-显示当前日期"><a href="#pgsql-显示当前日期" class="headerlink" title="pgsql 显示当前日期"></a>pgsql 显示当前日期</h2><h3 id="1"><a href="#1" class="headerlink" title="1:"></a>1:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">CURRENT_TIMESTAMP</span>, <span class="keyword">now</span>(), <span class="keyword">current_time</span>, <span class="keyword">current_date</span>;</div></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-10-13 15:17:44.840232+08	2016-10-13 15:17:44.840232+08	15:17:44.840232+08	2016-10-13</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2"><a href="#2" class="headerlink" title="2:"></a>2:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">now</span>()::<span class="keyword">TIMESTAMP</span>(<span class="number">0</span>)</div></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-10-13 15:30:36</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-将时间转换为10位时间戳"><a href="#3-将时间转换为10位时间戳" class="headerlink" title="3: 将时间转换为10位时间戳"></a>3: 将时间转换为10位时间戳</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">	<span class="keyword">EXTRACT</span>(</div><div class="line">		epoch</div><div class="line">		<span class="keyword">FROM</span></div><div class="line">			to_timestamp(</div><div class="line">				<span class="string">'2016-12-15 01:02:03'</span>,</div><div class="line">				<span class="string">'YYYY-MM-DD HH24:MI:SS'</span></div><div class="line">			)</div><div class="line">	);</div></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1481734923</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-将10位时间戳转换为时间-带时区"><a href="#4-将10位时间戳转换为时间-带时区" class="headerlink" title="4: 将10位时间戳转换为时间( 带时区)"></a>4: 将10位时间戳转换为时间( 带时区)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">	<span class="keyword">TIMESTAMP</span> <span class="keyword">WITH</span> <span class="keyword">TIME</span> ZONE <span class="string">'epoch'</span> + <span class="number">1481734923</span> * <span class="built_in">INTERVAL</span> <span class="string">'1 second'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-12-15 01:02:03+08</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="5-将10位时间戳转换为时间-不带时区"><a href="#5-将10位时间戳转换为时间-不带时区" class="headerlink" title="5: 将10位时间戳转换为时间( 不带时区)"></a>5: 将10位时间戳转换为时间( 不带时区)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">	<span class="keyword">TIMESTAMP</span> <span class="string">'epoch'</span> + <span class="number">1481734923</span> * <span class="built_in">INTERVAL</span> <span class="string">'1 second'</span>;</div></pre></td></tr></table></figure>
<ul>
<li>结果：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-12-14 17:02:03</div></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>通过 now() 或 CURRENT_TIMESTAMP 获取的时间是最完整的时间，包括时区，秒也保留到了6位小数。</li>
<li>current_time 只显示当前的时间，不包括日期</li>
<li>current_date 只显示当前的日期，不包括小时等信息</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[闭包的概念以及理解]]></title>
      <url>https://yujintang.github.io/2016/10/10/%E9%97%AD%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="闭包优点"><a href="#闭包优点" class="headerlink" title="闭包优点"></a>闭包优点</h3><ol>
<li>可以读取函数内部的变量，</li>
<li>让这些变量的值始终保持在内存中。<h3 id="闭包缺点"><a href="#闭包缺点" class="headerlink" title="闭包缺点"></a>闭包缺点</h3></li>
<li>不必要的闭包造成内存泄漏。</li>
</ol>
<h3 id="代码1"><a href="#代码1" class="headerlink" title="代码1"></a>代码1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> x = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> n = <span class="number">999</span>;</div><div class="line">     x = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; n += <span class="number">1</span> &#125;;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(n);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> f2;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = f1();</div><div class="line"></div><div class="line">result();<span class="comment">//999</span></div><div class="line"></div><div class="line">x();</div><div class="line"></div><div class="line">result();<span class="comment">// 1000</span></div></pre></td></tr></table></figure>
<ol>
<li>在这段代码中，result实际上就是闭包f2函数。它一共运行了两次，第一次的值是999，第二次的值是1000。这证明了，函数f1中的局部变量n一直保存在内存中，并没有在f1调用后被自动清除。</li>
<li>为什么会这样呢？原因就在于f1是f2的父函数，而f2被赋给了一个全局变量，这导致f2始终在内存中，而f2的存在依赖于f1，因此f1也始终在内存中，不会在调用结束后，被垃圾回收机制（garbage collection）回收。</li>
<li>这段代码中另一个值得注意的地方，就是”nAdd=function(){n+=1}”这一行，首先在nAdd前面没有使用var关键字，因此nAdd是一个全局变量，而不是局部变量。其次，nAdd的值是一个匿名函数（anonymous function），而这个匿名函数本身也是一个闭包，所以nAdd相当于是一个setter，可以在函数外部对函数内部的局部变量进行操作。<h3 id="代码2"><a href="#代码2" class="headerlink" title="代码2"></a>代码2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 结果：5 5 5 5 5</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">a</span>) </span>&#123;</div><div class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(a);</div><div class="line">        &#125;, <span class="number">0</span>);</div><div class="line">    &#125;)(i);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 结果： 0 1 2 3 4</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(i);</div><div class="line">    &#125;, <span class="number">0</span>);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 结果： 0 1 2 3 4</span></div></pre></td></tr></table></figure>
<ol>
<li>在第一个中，i为一个引用，但是第二个，function中为值传递，创建闭包将其作为块级作用域，其中let就是块级作用域，所以也可以达到这个效果。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL字符串操作]]></title>
      <url>https://yujintang.github.io/2016/09/13/PostgreSQL%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h1 id="常用的逻辑操作符号"><a href="#常用的逻辑操作符号" class="headerlink" title="常用的逻辑操作符号"></a>常用的逻辑操作符号</h1><ol>
<li>and ,or,not ,其语意与其它编程语言操作符相同</li>
</ol>
<h1 id="比较操作符"><a href="#比较操作符" class="headerlink" title="比较操作符"></a>比较操作符</h1><table>
<thead>
<tr>
<th style="text-align:center">操作符号</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">&lt;</td>
<td style="text-align:center">小于</td>
</tr>
<tr>
<td style="text-align:center">&gt;</td>
<td style="text-align:center">大于</td>
</tr>
<tr>
<td style="text-align:center">&lt;=</td>
<td style="text-align:center">小于或等于</td>
</tr>
<tr>
<td style="text-align:center">&gt;=</td>
<td style="text-align:center">大于或等于</td>
</tr>
<tr>
<td style="text-align:center">=</td>
<td style="text-align:center">等于</td>
</tr>
<tr>
<td style="text-align:center">!=</td>
<td style="text-align:center">不等于</td>
</tr>
</tbody>
</table>
<ol>
<li>a BETWEEN x AND y 等效于 a &gt;= x AND a &lt;= y    </li>
<li>a NOT BETWEEN x AND y 等效于 a &lt; x OR a &gt; y<h1 id="数学函数和操作符"><a href="#数学函数和操作符" class="headerlink" title="数学函数和操作符"></a>数学函数和操作符</h1><h2 id="基本操作符"><a href="#基本操作符" class="headerlink" title="基本操作符"></a>基本操作符</h2></li>
</ol>
<table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>+</td>
<td>加</td>
<td>2 + 3</td>
<td>5</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>2 - 3</td>
<td>-1</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>2 * 3</td>
<td>6</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>4 / 2</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>模</td>
<td>5 % 4</td>
<td>1</td>
</tr>
<tr>
<td>^</td>
<td>幂</td>
<td>2.0 ^ 3.0</td>
<td>8</td>
</tr>
<tr>
<td>\</td>
<td>/</td>
<td>平方根</td>
<td>\</td>
<td>/ 25.0</td>
<td>5</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>/</td>
<td>立方根</td>
<td>\</td>
<td>\</td>
<td>/ 27.0</td>
</tr>
<tr>
<td>!</td>
<td>阶乘</td>
<td>5 !</td>
<td>120</td>
</tr>
<tr>
<td>!!</td>
<td>阶乘</td>
<td>!! 5</td>
<td>120</td>
</tr>
<tr>
<td>@</td>
<td>绝对值</td>
<td>@ -5.0</td>
<td>5</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位AND</td>
<td>91 &amp; 15</td>
<td>11</td>
</tr>
<tr>
<td>\</td>
<td></td>
<td>按位OR</td>
<td>32 \</td>
<td>3</td>
<td>35</td>
</tr>
<tr>
<td>#</td>
<td>按位XOR</td>
<td>17 # 5</td>
<td>20</td>
</tr>
<tr>
<td>~</td>
<td>按位NOT</td>
<td>~1</td>
<td>-2</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移</td>
<td>1 &lt;&lt; 4</td>
<td>16</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移</td>
<td>8 &gt;&gt; 2</td>
<td>2</td>
</tr>
</tbody>
</table>
<h2 id="基本函数表"><a href="#基本函数表" class="headerlink" title="基本函数表"></a>基本函数表</h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">abs(x)</td>
<td style="text-align:center"></td>
<td style="text-align:center">绝对值</td>
<td style="text-align:center">abs(-17.4)</td>
<td style="text-align:center">17.4</td>
</tr>
<tr>
<td style="text-align:center">cbrt(double)</td>
<td style="text-align:center"></td>
<td style="text-align:center">立方根</td>
<td style="text-align:center">cbrt(27.0)</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">ceil(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">不小于参数的最小的整数</td>
<td style="text-align:center">ceil(-42.8)</td>
<td style="text-align:center">-42</td>
</tr>
<tr>
<td style="text-align:center">degrees(double)</td>
<td style="text-align:center"></td>
<td style="text-align:center">把弧度转为角度</td>
<td style="text-align:center">degrees(0.5)</td>
<td style="text-align:center">28.6478897565412</td>
</tr>
<tr>
<td style="text-align:center">exp(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">自然指数</td>
<td style="text-align:center">exp(1.0)</td>
<td style="text-align:center">2.71828182845905</td>
</tr>
<tr>
<td style="text-align:center">floor(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">不大于参数的最大整数</td>
<td style="text-align:center">floor(-42.8)</td>
<td style="text-align:center">-43</td>
</tr>
<tr>
<td style="text-align:center">ln(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">自然对数</td>
<td style="text-align:center">ln(2.0)</td>
<td style="text-align:center">0.693147180559945</td>
</tr>
<tr>
<td style="text-align:center">log(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">10为底的对数</td>
<td style="text-align:center">log(100.0)</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">log(b numeric,x numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">numeric指定底数的对数</td>
<td style="text-align:center">log(2.0, 64.0)</td>
<td style="text-align:center">6.0000000000</td>
</tr>
<tr>
<td style="text-align:center">mod(y, x)</td>
<td style="text-align:center"></td>
<td style="text-align:center">取余数</td>
<td style="text-align:center">mod(9,4)</td>
<td style="text-align:center">1</td>
</tr>
<tr>
<td style="text-align:center">pi() double</td>
<td style="text-align:center"></td>
<td style="text-align:center">“π”常量</td>
<td style="text-align:center">pi()</td>
<td style="text-align:center">3.14159265358979</td>
</tr>
<tr>
<td style="text-align:center">power(a double, b double)</td>
<td style="text-align:center">double</td>
<td style="text-align:center">求a的b次幂</td>
<td style="text-align:center">power(9.0, 3.0)</td>
<td style="text-align:center">729</td>
</tr>
<tr>
<td style="text-align:center">power(a numeric, b numeric)</td>
<td style="text-align:center">numeric</td>
<td style="text-align:center">求a的b次幂</td>
<td style="text-align:center">power(9.0, 3.0)</td>
<td style="text-align:center">729</td>
</tr>
<tr>
<td style="text-align:center">radians(double)</td>
<td style="text-align:center">double</td>
<td style="text-align:center">把角度转为弧度</td>
<td style="text-align:center">radians(45.0)</td>
<td style="text-align:center">0.785398163397448</td>
</tr>
<tr>
<td style="text-align:center">random()</td>
<td style="text-align:center">double</td>
<td style="text-align:center">0.0到1.0之间的随机数值</td>
<td style="text-align:center">random()</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">round(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">圆整为最接近的整数</td>
<td style="text-align:center">round(42.4)</td>
<td style="text-align:center">42</td>
</tr>
<tr>
<td style="text-align:center">round(v numeric, s int)</td>
<td style="text-align:center">numeric</td>
<td style="text-align:center">圆整为s位小数数字</td>
<td style="text-align:center">round(42.438,2)</td>
<td style="text-align:center">42.44</td>
</tr>
<tr>
<td style="text-align:center">sqrt(double/numeric)</td>
<td style="text-align:center"></td>
<td style="text-align:center">平方根</td>
<td style="text-align:center">sqrt(2.0)</td>
<td style="text-align:center">1.4142135623731</td>
</tr>
</tbody>
</table>
<h2 id="三角函数列表"><a href="#三角函数列表" class="headerlink" title="三角函数列表"></a>三角函数列表</h2><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">acos(x)</td>
<td style="text-align:center">反余弦</td>
</tr>
<tr>
<td style="text-align:center">asin(x)</td>
<td style="text-align:center">反正弦</td>
</tr>
<tr>
<td style="text-align:center">atan(x)</td>
<td style="text-align:center">反正切</td>
</tr>
<tr>
<td style="text-align:center">atan2(x, y)</td>
<td style="text-align:center">正切 y/x 的反函数</td>
</tr>
<tr>
<td style="text-align:center">cos(x)</td>
<td style="text-align:center">余弦</td>
</tr>
<tr>
<td style="text-align:center">cot(x)</td>
<td style="text-align:center">余切</td>
</tr>
<tr>
<td style="text-align:center">sin(x)</td>
<td style="text-align:center">正弦</td>
</tr>
<tr>
<td style="text-align:center">tan(x)</td>
<td style="text-align:center">正切</td>
</tr>
</tbody>
</table>
<h1 id="字符串函数和操作符"><a href="#字符串函数和操作符" class="headerlink" title="字符串函数和操作符"></a>字符串函数和操作符</h1><table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">返回类型</th>
<th style="text-align:center">描述</th>
<th style="text-align:center">例子</th>
<th style="text-align:center">结果</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">string \</td>
<td style="text-align:center">\</td>
<td style="text-align:center">string</td>
<td style="text-align:center">text</td>
<td style="text-align:center">字串连接</td>
<td>‘Post’ \</td>
<td>\</td>
<td>‘greSQL’</td>
<td>PostgreSQL</td>
</tr>
<tr>
<td style="text-align:center">bit_length(string)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">字串里二进制位的个数</td>
<td style="text-align:center">bit_length(‘jose’)</td>
<td style="text-align:center">32</td>
</tr>
<tr>
<td style="text-align:center">char_length(string)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">字串中的字符个数</td>
<td style="text-align:center">char_length(‘jose’)</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">convert(string using conversion_name)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">使用指定的转换名字改变编码。</td>
<td style="text-align:center"></td>
<td style="text-align:center">convert(‘PostgreSQL’ using iso_8859_1_to_utf8)</td>
</tr>
<tr>
<td style="text-align:center">lower(string)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把字串转化为小写</td>
<td style="text-align:center">lower(‘TOM’)</td>
<td style="text-align:center">tom</td>
</tr>
<tr>
<td style="text-align:center">octet_length(string)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">字串中的字节数</td>
<td style="text-align:center">octet_length(‘jose’)</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">octet_length(string)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">字串中的字节数</td>
<td style="text-align:center">octet_length(‘jose’)</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">overlay(string placing string from int [for int])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">替换子字串</td>
<td style="text-align:center">overlay(‘Txxxxas’ placing ‘hom’ from 2 for 4)</td>
<td style="text-align:center">Thomas</td>
</tr>
<tr>
<td style="text-align:center">position(substring in string)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">指定的子字串的位置</td>
<td style="text-align:center">position(‘om’ in ‘Thomas’)</td>
<td style="text-align:center">3</td>
</tr>
<tr>
<td style="text-align:center">substring(string [from int] [for int])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">抽取子字串</td>
<td style="text-align:center">substring(‘Thomas’ from 2 for 3)</td>
<td style="text-align:center">hom</td>
</tr>
<tr>
<td style="text-align:center">substring(string from pattern)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">抽取匹配 POSIX 正则表达式的子字串</td>
<td style="text-align:center">substring(‘Thomas’ from ‘…$’)</td>
<td style="text-align:center">mas</td>
</tr>
<tr>
<td style="text-align:center">substring(string from pattern for escape)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">抽取匹配SQL正则表达式的子字串</td>
<td style="text-align:center">substring(‘Thomas’ from ‘%#”o<em>a#”</em>‘ for ‘#’)</td>
<td style="text-align:center">oma</td>
</tr>
<tr>
<td style="text-align:center">trim([leading \</td>
<td style="text-align:center">trailing \</td>
<td style="text-align:center">both] [characters] from string)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">从字串string的开头/结尾/两边/ 删除只包含characters(缺省是一个空白)的最长的字串</td>
<td>trim(both ‘x’ from ‘xTomxx’)</td>
<td>Tom</td>
</tr>
<tr>
<td style="text-align:center">upper(string)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把字串转化为大写。</td>
<td style="text-align:center">upper(‘tom’)</td>
<td style="text-align:center">TOM</td>
</tr>
<tr>
<td style="text-align:center">ascii(text)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">参数第一个字符的ASCII码</td>
<td style="text-align:center">ascii(‘x’)</td>
<td style="text-align:center">120</td>
</tr>
<tr>
<td style="text-align:center">btrim(string text [, characters text])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">从string开头和结尾删除只包含在characters里(缺省是空白)的字符的最长字串</td>
<td style="text-align:center">btrim(‘xyxtrimyyx’,’xy’)</td>
<td style="text-align:center">trim</td>
</tr>
<tr>
<td style="text-align:center">chr(int)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">给出ASCII码的字符</td>
<td style="text-align:center">chr(65)    A</td>
<td style="text-align:center"></td>
</tr>
<tr>
<td style="text-align:center">convert(string text, [src_encoding name,] dest_encoding name)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把字串转换为dest_encoding</td>
<td style="text-align:center">convert( ‘text_in_utf8’, ‘UTF8’, ‘LATIN1’)</td>
<td style="text-align:center">以ISO 8859-1编码表示的text_in_utf8</td>
</tr>
<tr>
<td style="text-align:center">initcap(text)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把每个单词的第一个子母转为大写，其它的保留小写。单词是一系列字母数字组成的字符，用非字母数字分隔。</td>
<td style="text-align:center">initcap(‘hi thomas’)</td>
<td style="text-align:center">Hi Thomas</td>
</tr>
<tr>
<td style="text-align:center">length(string text)</td>
<td style="text-align:center">int</td>
<td style="text-align:center">string中字符的数目</td>
<td style="text-align:center">length(‘jose’)</td>
<td style="text-align:center">4</td>
</tr>
<tr>
<td style="text-align:center">lpad(string text, length int [, fill text])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">通过填充字符fill(缺省时为空白)，把string填充为长度length。 如果string已经比length长则将其截断(在右边)。</td>
<td style="text-align:center">lpad(‘hi’, 5, ‘xy’)</td>
<td style="text-align:center">xyxhi</td>
</tr>
<tr>
<td style="text-align:center">ltrim(string text [, characters text])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">从字串string的开头删除只包含characters(缺省是一个空白)的最长的字串。</td>
<td style="text-align:center">ltrim(‘zzzytrim’,’xyz’)</td>
<td style="text-align:center">trim</td>
</tr>
<tr>
<td style="text-align:center">md5(string text)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">计算给出string的MD5散列，以十六进制返回结果。</td>
<td style="text-align:center">md5(‘abc’)</td>
<td style="text-align:center">900150983cd24fb0d6963f7d28e17f72</td>
</tr>
<tr>
<td style="text-align:center">repeat(string text, number int)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">重复string number次。</td>
<td style="text-align:center">repeat(‘Pg’, 4)</td>
<td style="text-align:center">PgPgPgPg</td>
</tr>
<tr>
<td style="text-align:center">replace(string text, from text, to text)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把字串string里出现地所有子字串from替换成子字串to。</td>
<td style="text-align:center">replace(‘abcdefabcdef’, ‘cd’, ‘XX’)</td>
<td style="text-align:center">abXXefabXXef</td>
</tr>
<tr>
<td style="text-align:center">rpad(string text, length int [, fill text])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">通过填充字符fill(缺省时为空白)，把string填充为长度length。如果string已经比length长则将其截断。</td>
<td style="text-align:center">rpad(‘hi’, 5, ‘xy’)</td>
<td style="text-align:center">hixyx</td>
</tr>
<tr>
<td style="text-align:center">rtrim(string text [, character text])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">从字串string的结尾删除只包含character(缺省是个空白)的最长的字</td>
<td style="text-align:center">rtrim(‘trimxxxx’,’x’)</td>
<td style="text-align:center">trim</td>
</tr>
<tr>
<td style="text-align:center">split_part(string text, delimiter text, field int)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">根据delimiter分隔string返回生成的第field个子字串(1 Base)。</td>
<td style="text-align:center">split_part(‘abc~@~def~@~ghi’, ‘~@~’, 2)</td>
<td style="text-align:center">def</td>
</tr>
<tr>
<td style="text-align:center">strpos(string, substring)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">声明的子字串的位置。</td>
<td style="text-align:center">strpos(‘high’,’ig’)</td>
<td style="text-align:center">2</td>
</tr>
<tr>
<td style="text-align:center">substr(string, from [, count])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">抽取子字串。</td>
<td style="text-align:center">substr(‘alphabet’, 3, 2)</td>
<td style="text-align:center">ph</td>
</tr>
<tr>
<td style="text-align:center">to_ascii(text [, encoding])</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把text从其它编码转换为ASCII。</td>
<td style="text-align:center">to_ascii(‘Karel’)</td>
<td style="text-align:center">Karel</td>
</tr>
<tr>
<td style="text-align:center">to_hex(number int/bigint)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把number转换成其对应地十六进制表现形式 。</td>
<td style="text-align:center">to_hex(9223372036854775807)</td>
<td style="text-align:center">7fffffffffffffff</td>
</tr>
<tr>
<td style="text-align:center">translate(string text, from text, to text)</td>
<td style="text-align:center">text</td>
<td style="text-align:center">把在string中包含的任何匹配from中的字符的字符转化为对应的在to中的字符。</td>
<td style="text-align:center">translate(‘12345’, ‘14’, ‘ax’)</td>
<td style="text-align:center">a23x5</td>
</tr>
</tbody>
</table>
<h1 id="位串函数和操作符"><a href="#位串函数和操作符" class="headerlink" title="位串函数和操作符"></a>位串函数和操作符</h1><ol>
<li>对于类型bit和bit varying，除了常用的比较操作符之外，还可以使用以下列表中由PostgreSQL提供的位串函数和操作符，其中&amp;、|和#的位串操作数必须等长。在移位的时候，保留原始的位串的的长度。<br>| 操作符  |  描述   |          例子          |    结果    |<br>| :–: | :—: | :——————: | :——: |<br>| || |  连接   | B’10001’ || B’011’ | 10001011 |<br>|  &amp;   | 按位AND | B’10001’ &amp; B’01101’  |  00001   |<br>|  |  | 按位OR  | B’10001’ | B’01101’ |  11101   |<br>|  #  | 按位XOR | B’10001’ # B’01101’ |  11100   |<br>|  ~   | 按位NOT |      ~ B’10001’      |  01110   |<br>|  &lt;&lt;  | 按位左移  |    B’10001’ &lt;&lt; 3     |  01000   |<br>|  &gt;&gt;  | 按位右移  |    B’10001’ &gt;&gt; 2     |  00100   |</li>
</ol>
<hr>
<p>位串还可以使用字符串函数：length， bit_length， octet_length， position， substring。此外，我们还可以在整数和bit之间来回转换，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">MyTest=# SELECT 44::bit(10);</div><div class="line">        bit</div><div class="line">    ------------</div><div class="line">     0000101100</div><div class="line">    (1 row)</div><div class="line">    MyTest=# SELECT 44::bit(3);</div><div class="line">     bit</div><div class="line">    -----</div><div class="line">     100</div><div class="line">    (1 row)</div><div class="line">    MyTest=# SELECT cast(-44 as bit(12));</div><div class="line">         bit</div><div class="line">    --------------</div><div class="line">     111111010100</div><div class="line">    (1 row)</div><div class="line">    MyTest=# SELECT &apos;1110&apos;::bit(4)::integer;</div><div class="line">     int4</div><div class="line">    ------</div><div class="line">       14</div><div class="line">    (1 row)</div><div class="line">    注意：如果只是转换为&quot;bit&quot;，意思是转换成bit(1)，因此只会转换成整数的最低位。</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js中URL编码与解码]]></title>
      <url>https://yujintang.github.io/2016/09/09/js%E4%B8%ADURL%E7%BC%96%E7%A0%81%E4%B8%8E%E8%A7%A3%E7%A0%81/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[centos7下安装postgresql]]></title>
      <url>https://yujintang.github.io/2016/08/26/centos7%E4%B8%8B%E5%AE%89%E8%A3%85postgresql/</url>
      <content type="html"><![CDATA[<h2 id="添加9-5版本的源"><a href="#添加9-5版本的源" class="headerlink" title="添加9.5版本的源"></a>添加9.5版本的源</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm</div></pre></td></tr></table></figure>
<h2 id="安装PostgreSQL"><a href="#安装PostgreSQL" class="headerlink" title="安装PostgreSQL"></a>安装PostgreSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo  yum install postgresql95-server postgresql95-contrib</div></pre></td></tr></table></figure>
<h2 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /usr/pgsql-9.5/bin/postgresql95-setup initdb</div></pre></td></tr></table></figure>
<h2 id="开机自启动"><a href="#开机自启动" class="headerlink" title="开机自启动"></a>开机自启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl enable postgresql-9.5.service</div></pre></td></tr></table></figure>
<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start postgresql-9.5.service</div></pre></td></tr></table></figure>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl stop postgresql-9.5.service</div></pre></td></tr></table></figure>
<h2 id="开启远程访问"><a href="#开启远程访问" class="headerlink" title="开启远程访问"></a>开启远程访问</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vi /var/lib/pgsql/9.5/data/postgresql.conf</div><div class="line"> 修改#listen_addresses = &apos;localhost&apos;  为  listen_addresses=&apos;*&apos;</div></pre></td></tr></table></figure>
<p><img src="2.png" alt=""></p>
<h2 id="添加信任远程连接"><a href="#添加信任远程连接" class="headerlink" title="添加信任远程连接"></a>添加信任远程连接</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /var/lib/pgsql/9.5/data/pg_hba.conf</div><div class="line">  # IPv4 local connections:</div><div class="line">    host    all            all      127.0.0.1/32      trust</div><div class="line">    host    all            all      192.168.1.0/24（需要连接的服务器IP）  trust</div></pre></td></tr></table></figure>
<ul>
<li>这样的话，192.168.1.＊访问，都可以<br><img src="3.png" alt=""><h2 id="角色配置"><a href="#角色配置" class="headerlink" title="角色配置"></a>角色配置</h2></li>
<li>PostgreSQL 安装完成后，会建立一下‘postgres’用户，用于执行PostgreSQL，数据库中也会建立一个’postgres’用户，默认密码为自动生成，需要在系统中改一下。<h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo -i -u postgres</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="登陆数据库"><a href="#登陆数据库" class="headerlink" title="登陆数据库"></a>登陆数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">psql - U postgres</div></pre></td></tr></table></figure>
<h3 id="修改postgres密码"><a href="#修改postgres密码" class="headerlink" title="修改postgres密码"></a>修改postgres密码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER USER postgres WITH PASSWORD &apos;123456&apos;</div></pre></td></tr></table></figure>
<h3 id="退出postgres用户"><a href="#退出postgres用户" class="headerlink" title="退出postgres用户"></a>退出postgres用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">\q</div></pre></td></tr></table></figure>
<p><img src="1.png" alt=""></p>
<h3 id="退出postgres用户-1"><a href="#退出postgres用户-1" class="headerlink" title="退出postgres用户"></a>退出postgres用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure>
<h3 id="开放防火墙"><a href="#开放防火墙" class="headerlink" title="开放防火墙"></a>开放防火墙</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo firewall-cmd --permanent --add-port=5432/tcp  </div><div class="line">sudo firewall-cmd --permanent --add-port=80/tcp  </div><div class="line">sudo firewall-cmd --reload</div></pre></td></tr></table></figure>
<h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><ol>
<li><p>firewall-cmd: 未找到命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo yum install firewalld</div></pre></td></tr></table></figure>
</li>
<li><p>​</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="重启数据库服务"><a href="#重启数据库服务" class="headerlink" title="重启数据库服务"></a>重启数据库服务</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart postgresql-9.5.service</div></pre></td></tr></table></figure>
<h3 id="pg-hba-conf配置"><a href="#pg-hba-conf配置" class="headerlink" title="pg_hba.conf配置 "></a><a href="http://blog.163.com/czg_e/blog/static/461045612011411113855161/" target="_blank" rel="external">pg_hba.conf配置 </a></h3><h3 id="CentOS-7-firewalld使用简介"><a href="#CentOS-7-firewalld使用简介" class="headerlink" title="CentOS 7 firewalld使用简介"></a><a href="http://www.centoscn.com/CentOS/help/2015/0208/4667.html" target="_blank" rel="external">CentOS 7 firewalld使用简介</a></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下报 XXX 不在 sudoers 文件中。此事将被报告。]]></title>
      <url>https://yujintang.github.io/2016/08/26/linux%E4%B8%8B%E6%8A%A5-XXX-%E4%B8%8D%E5%9C%A8-sudoers-%E6%96%87%E4%BB%B6%E4%B8%AD%E3%80%82%E6%AD%A4%E4%BA%8B%E5%B0%86%E8%A2%AB%E6%8A%A5%E5%91%8A%E3%80%82/</url>
      <content type="html"><![CDATA[<h2 id="linux下新建账号，进行sudo-，报错"><a href="#linux下新建账号，进行sudo-，报错" class="headerlink" title="linux下新建账号，进行sudo ，报错"></a>linux下新建账号，进行sudo ，报错</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xxx 不在 sudoers 文件中。此事将被报告。</div></pre></td></tr></table></figure>
<h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><h4 id="切换到root"><a href="#切换到root" class="headerlink" title="切换到root"></a>切换到root</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su -</div></pre></td></tr></table></figure>
<h4 id="修改-etc-sudoers"><a href="#修改-etc-sudoers" class="headerlink" title="修改/etc/sudoers"></a>修改/etc/sudoers</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vi /etc/sudoers</div><div class="line"></div><div class="line">## Allow root to run any commands anywhere</div><div class="line">root    ALL=(ALL)       ALL</div><div class="line">XXX ALL=(ALL)     ALL (新建行，将XXX修改为自己的user)</div></pre></td></tr></table></figure>
<h4 id="修改sudoers的权限"><a href="#修改sudoers的权限" class="headerlink" title="修改sudoers的权限"></a>修改sudoers的权限</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod 740 /etc/sudoers</div></pre></td></tr></table></figure>
<h2 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac下postgresql安装]]></title>
      <url>https://yujintang.github.io/2016/08/23/mac%E4%B8%8Bpostgresql%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<h1 id="mac下，使用brew安装PostgreSQL"><a href="#mac下，使用brew安装PostgreSQL" class="headerlink" title="mac下，使用brew安装PostgreSQL"></a>mac下，使用brew安装PostgreSQL</h1><h2 id="1-安装PostgreSQL"><a href="#1-安装PostgreSQL" class="headerlink" title="1.安装PostgreSQL"></a>1.安装PostgreSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install postgresql -v</div></pre></td></tr></table></figure>
<h2 id="2-初始配置PostgreSQL"><a href="#2-初始配置PostgreSQL" class="headerlink" title="2.初始配置PostgreSQL"></a>2.初始配置PostgreSQL</h2><ul>
<li>指定”/usr/local/var/postgres” 为 PostgreSQL 的配置数据存放目录</li>
<li>设置数据库数据编码是 utf8<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">initdb /usr/local/var/postgres -E utf8</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="报错以及结局方案"><a href="#报错以及结局方案" class="headerlink" title="报错以及结局方案"></a>报错以及结局方案</h3><h4 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fixing permissions on existing directory /usr/local/var/postgres ... initdb: could not change permissions of directory &quot;/usr/local/var/postgres&quot;: Operation not permitted</div></pre></td></tr></table></figure>
<h4 id="结局方法"><a href="#结局方法" class="headerlink" title="结局方法"></a>结局方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R `whoami` /usr/local</div></pre></td></tr></table></figure>
<h2 id="3-设置开机启动"><a href="#3-设置开机启动" class="headerlink" title="3.设置开机启动"></a>3.设置开机启动</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</div></pre></td></tr></table></figure>
<h2 id="4-启动PostgreSQL"><a href="#4-启动PostgreSQL" class="headerlink" title="4.启动PostgreSQL"></a>4.启动PostgreSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pg_ctl -D /usr/local/var/postgres -l /usr/local/var/postgres/server.log start</div></pre></td></tr></table></figure>
<h2 id="5-关闭PostgreSQL"><a href="#5-关闭PostgreSQL" class="headerlink" title="5.关闭PostgreSQL"></a>5.关闭PostgreSQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mac下使用docker]]></title>
      <url>https://yujintang.github.io/2016/08/23/mac%E4%B8%8B%E4%BD%BF%E7%94%A8docker/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[Nodemon在webstorm的使用]]></title>
      <url>https://yujintang.github.io/2016/08/18/Nodemon%E5%9C%A8webstorm%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="nodemon在命令行的使用"><a href="#nodemon在命令行的使用" class="headerlink" title="nodemon在命令行的使用"></a>nodemon在命令行的使用</h2><h3 id="nodemon安装"><a href="#nodemon安装" class="headerlink" title="nodemon安装"></a>nodemon安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodemon</div></pre></td></tr></table></figure>
<h3 id="命令行运行，代替node"><a href="#命令行运行，代替node" class="headerlink" title="命令行运行，代替node"></a>命令行运行，代替node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon app.js</div></pre></td></tr></table></figure>
<h3 id="可指定端口号，如果应用中没有指定的话"><a href="#可指定端口号，如果应用中没有指定的话" class="headerlink" title="可指定端口号，如果应用中没有指定的话"></a>可指定端口号，如果应用中没有指定的话</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon app.js localhost 3001</div></pre></td></tr></table></figure>
<h3 id="debug-模式"><a href="#debug-模式" class="headerlink" title="debug 模式"></a>debug 模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon --debug app.js</div></pre></td></tr></table></figure>
<h3 id="查看使用文档"><a href="#查看使用文档" class="headerlink" title="查看使用文档"></a>查看使用文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon -h</div></pre></td></tr></table></figure>
<h2 id="nodemon-在webstorm中的使用"><a href="#nodemon-在webstorm中的使用" class="headerlink" title="nodemon 在webstorm中的使用"></a>nodemon 在webstorm中的使用</h2><h3 id="非debug模式，Node-parameters：修改：（mac下）"><a href="#非debug模式，Node-parameters：修改：（mac下）" class="headerlink" title="非debug模式，Node parameters：修改：（mac下）"></a>非debug模式，Node parameters：修改：（mac下）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/node_modules/nodemon/bin/nodemon.js</div></pre></td></tr></table></figure>
<p><img src="2.jpeg" alt=""></p>
<h3 id="debug模式，Node-parameters：修改：（mac下）"><a href="#debug模式，Node-parameters：修改：（mac下）" class="headerlink" title="debug模式，Node parameters：修改：（mac下）"></a>debug模式，Node parameters：修改：（mac下）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/node_modules/nodemon/bin/nodemon.js --debug</div></pre></td></tr></table></figure>
<p><img src="1.jpeg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git的使用]]></title>
      <url>https://yujintang.github.io/2016/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://gist.github.com/ergatea/646d0e7915e59b580bd58eb4015ada9e" target="_blank" rel="external">原地址入口</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰教程</a></p>
<h2 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</div><div class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</div><div class="line">git config --global color.ui true                         # git status等命令自动着色</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</div><div class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</div><div class="line">git status                                                # 查看当前版本状态（是否修改）</div><div class="line">git add xyz                                               # 添加xyz文件至index</div><div class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</div><div class="line">git commit -m &apos;xxx&apos;                                       # 提交</div><div class="line">git commit --amend -m &apos;xxx&apos;                               # 合并上一次提交（用于反复修改）</div><div class="line">git commit -am &apos;xxx&apos;                                      # 将add和commit合为一步</div><div class="line">git rm xxx                                                # 删除index中的文件</div><div class="line">git rm -r *                                               # 递归删除</div><div class="line">git log                                                   # 显示提交日志</div><div class="line">git log -1                                                # 显示1行日志 -n为n行</div><div class="line">git log -5</div><div class="line">git log --stat                                            # 显示提交日志及相关变动文件</div><div class="line">git log -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</div><div class="line">git show dfb02                                            # 可只用commitid的前几位</div><div class="line">git show HEAD                                             # 显示HEAD提交日志</div><div class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div><div class="line">git tag                                                   # 显示已存在的tag</div><div class="line">git tag -a v2.0 -m &apos;xxx&apos;                                  # 增加v2.0的tag</div><div class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</div><div class="line">git log v2.0                                              # 显示v2.0的日志</div><div class="line">git diff                                                  # 显示所有未添加至index的变更</div><div class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</div><div class="line">git diff HEAD^                                            # 比较与上一个版本的差异</div><div class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</div><div class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</div><div class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div><div class="line">git branch                                                # 显示本地分支</div><div class="line">git branch --contains 50089                               # 显示包含提交50089的分支</div><div class="line">git branch -a                                             # 显示所有分支</div><div class="line">git branch -r                                             # 显示所有原创分支</div><div class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</div><div class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</div><div class="line">git branch -m master master_copy                          # 本地分支改名</div><div class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</div><div class="line">git checkout -b master master_copy                        # 上面的完整版</div><div class="line">git checkout features/performance                         # 检出已存在的features/performance分支</div><div class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div><div class="line">git checkout v2.0                                         # 检出版本v2.0</div><div class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</div><div class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</div><div class="line">git merge origin/master                                   # 合并远程master分支至当前分支</div><div class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</div><div class="line">git push origin master                                    # 将当前分支push到远程master分支</div><div class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</div><div class="line">git push --tags                                           # 把所有tag推送到远程仓库</div><div class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</div><div class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</div><div class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</div><div class="line">git mv README README2                                     # 重命名文件README为README2</div><div class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div><div class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</div><div class="line">git ls-files                                              # 列出git index包含的文件</div><div class="line">git show-branch                                           # 图示当前分支历史</div><div class="line">git show-branch --all                                     # 图示所有分支历史</div><div class="line">git whatchanged                                           # 显示提交历史对应的文件修改</div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div><div class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</div><div class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</div><div class="line">git reflog                                                # 显示所有提交，包括孤立节点</div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</div><div class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</div><div class="line">git stash list                                            # 查看所有暂存</div><div class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</div><div class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</div><div class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</div><div class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Process.nextTick与setlmmediate区别]]></title>
      <url>https://yujintang.github.io/2016/08/15/Process-nextTick%E4%B8%8Esetlmmediate%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="setTimeout-与setInterVal-函数"><a href="#setTimeout-与setInterVal-函数" class="headerlink" title="setTimeout()与setInterVal()函数"></a>setTimeout()与setInterVal()函数</h2><ul>
<li>setTimeout()与setInterVal() 区别在于执行次数</li>
<li>setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'0秒 setTimeout'</span>)</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1秒 setTimeout A'</span>)</div><div class="line">&#125;,<span class="number">1000</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1秒 setTimeout B '</span>)</div><div class="line">&#125;,<span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">//answer</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">0</span>秒 setTimeout</div><div class="line"><span class="number">1</span>秒 setTimeout A</div><div class="line"><span class="number">1</span>秒 setTimeout B</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Process-nextTick-与setImmediate区别"><a href="#Process-nextTick-与setImmediate区别" class="headerlink" title="Process.nextTick 与setImmediate区别"></a>Process.nextTick 与setImmediate区别</h2><p><img src="1.jpeg" alt=""></p>
<h2 id="resolve的promise"><a href="#resolve的promise" class="headerlink" title="resolve的promise"></a>resolve的promise</h2><ul>
<li>立即resolve的Promise对象，是在本轮“事件循环”（event loop）的结束时，而不是在下一轮“事件循环”的开始时。</li>
<li>setTimeout(fn, 0)在下一轮“事件循环”开始时执行，Promise.resolve()在本轮“事件循环”结束时执行，console.log(’one‘)则是立即执行，因此最先输出。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'three'</span>);</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'two'</span>);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'one'</span>);</div><div class="line"></div><div class="line"><span class="comment">// one</span></div><div class="line"><span class="comment">// two</span></div><div class="line"><span class="comment">// three</span></div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用nginx反向代理]]></title>
      <url>https://yujintang.github.io/2016/08/06/%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<hr>
<p>遇到的问题： 静态页面放到阿里云，如何使浏览器能够请求，ajax跨域访问服务器内容 </p>
<hr>
<h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><blockquote>
<p>阿里云服务器centos7环境</p>
<h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
</blockquote>
<h5 id="nginx-升级"><a href="#nginx-升级" class="headerlink" title="nginx 升级"></a>nginx 升级</h5><blockquote>
<p>如果你的nginx要使用最新稳定版，可以进行升级</p>
</blockquote>
<h6 id="配置nginx-源"><a href="#配置nginx-源" class="headerlink" title="配置nginx 源"></a>配置nginx 源</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/yum.repos.d/nginx.repo</div></pre></td></tr></table></figure>
<h6 id="将下面内容写入"><a href="#将下面内容写入" class="headerlink" title="将下面内容写入"></a>将下面内容写入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#nginx.repo  </div><div class="line"></div><div class="line">[nginx]  </div><div class="line">name=nginx repo  </div><div class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/  </div><div class="line">gpgcheck=0  </div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<h6 id="进行升级"><a href="#进行升级" class="headerlink" title="进行升级"></a>进行升级</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum update nginx</div></pre></td></tr></table></figure>
<h4 id="如何访问静态页面"><a href="#如何访问静态页面" class="headerlink" title="如何访问静态页面"></a>如何访问静态页面</h4><h5 id="将静态页面放入阿里云某文件下：如：-opt-client-然后配置nginx"><a href="#将静态页面放入阿里云某文件下：如：-opt-client-然后配置nginx" class="headerlink" title="将静态页面放入阿里云某文件下：如：/opt/client/, 然后配置nginx"></a>将静态页面放入阿里云某文件下：如：/opt/client/, 然后配置nginx</h5><h6 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<h6 id="写入如下配置"><a href="#写入如下配置" class="headerlink" title="写入如下配置"></a>写入如下配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   location / &#123;</div><div class="line">           root   /opt/client;</div><div class="line">           index  index.html index.htm;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl restart nginx</div></pre></td></tr></table></figure>
<h6 id="阿里云的坑"><a href="#阿里云的坑" class="headerlink" title="阿里云的坑"></a>阿里云的坑</h6><ul>
<li>不能放在／root／下，会报403错，尝试了一下 user root; 无效<h4 id="如何让前端访问服务器"><a href="#如何让前端访问服务器" class="headerlink" title="如何让前端访问服务器"></a>如何让前端访问服务器</h4><h5 id="前端访问"><a href="#前端访问" class="headerlink" title="前端访问"></a>前端访问</h5></li>
<li>页面位置：/opt/client/login.html</li>
<li>ajax post 请求位置：/api/users/login</li>
<li>服务器提供接口： ／127.0.0.1:3000/users/login<h6 id="前端ajax-请求代码"><a href="#前端ajax-请求代码" class="headerlink" title="前端ajax 请求代码"></a>前端ajax 请求代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(&apos;api/users/login&apos;, &#123;account: account, password: password&#125;, function (result) &#123;</div><div class="line">         </div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="nginx-写入配置"><a href="#nginx-写入配置" class="headerlink" title="nginx  写入配置"></a>nginx  写入配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//打开配置文件</div><div class="line">$ vim /etc/nginx/nginx.conf</div><div class="line">//写入如下配置</div><div class="line">       	location ^~/api/ &#123;</div><div class="line">        	rewrite ^/api/(.*)$ /$1 break;</div><div class="line">        	proxy_pass http://127.0.0.1:3000;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h6 id="重启nginx-1"><a href="#重启nginx-1" class="headerlink" title="重启nginx"></a>重启nginx</h6><h6 id="访问127-0-0-1-80-login-html"><a href="#访问127-0-0-1-80-login-html" class="headerlink" title="访问127.0.0.1:80/login.html"></a>访问127.0.0.1:80/login.html</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下git安装]]></title>
      <url>https://yujintang.github.io/2016/08/02/linux%E4%B8%8Bgit%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>centos 7系统</p>
</blockquote>
<h4 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1.更新系统"></a>1.更新系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update</div></pre></td></tr></table></figure>
<h4 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2.安装依赖包"></a>2.安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>
<h4 id="3-下载git源码"><a href="#3-下载git源码" class="headerlink" title="3.下载git源码"></a>3.下载git源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/git/git/archive/v2.3.0.zip</div><div class="line">$ unzip v2.3.0.zip</div><div class="line">$ cd git-2.3.0</div></pre></td></tr></table></figure>
<h4 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ make prefix=/usr/local/git all</div><div class="line">$ sudo make prefix=/usr/local/git install</div></pre></td></tr></table></figure>
<h4 id="5-查看git所在路径："><a href="#5-查看git所在路径：" class="headerlink" title="5.查看git所在路径："></a>5.查看git所在路径：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ whereis git</div><div class="line">git: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz</div></pre></td></tr></table></figure>
<h4 id="6-git添加到环境变量"><a href="#6-git添加到环境变量" class="headerlink" title="6.git添加到环境变量"></a>6.git添加到环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/profile</div><div class="line">／／最后一行添加</div><div class="line">export PATH=/usr/local/git/bin:$PATH</div><div class="line">／／应用</div><div class="line">$ source /etc/profile</div></pre></td></tr></table></figure>
<h4 id="7-设置git"><a href="#7-设置git" class="headerlink" title="7.设置git"></a>7.设置git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;youremail@domain.com&quot;</div></pre></td></tr></table></figure>
<h4 id="8-创建ssh－keys"><a href="#8-创建ssh－keys" class="headerlink" title="8.创建ssh－keys"></a>8.创建ssh－keys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//检查是否存在 </div><div class="line">$ ls -al ~/.ssh</div><div class="line"></div><div class="line">//生成ssh－keygen </div><div class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line"></div><div class="line">//Adding your SSH key to the ssh-agent</div><div class="line">//Ensure ssh-agent is enabled:</div><div class="line">$ eval &quot;$(ssh-agent -s)&quot;</div><div class="line"></div><div class="line">//Add your SSH key to the ssh-agent</div><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里（万网）企业邮箱如何使用foxmail等第三方登陆]]></title>
      <url>https://yujintang.github.io/2016/08/01/%E9%98%BF%E9%87%8C%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8foxmail%E7%AD%89%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<h4 id="1-如何开启smtp或pop3"><a href="#1-如何开启smtp或pop3" class="headerlink" title="1.如何开启smtp或pop3"></a>1.如何开启smtp或pop3</h4><p>smtp或pop3是企业邮箱管理员在创建你的账号创建时候设置是否开启的，而一般情况你的smtp和pop3也是默认开启的。<br><img src="aliaymail.png" alt=""></p>
<h4 id="2-在foxmail等第三方邮箱登陆时候，如何设置地址："><a href="#2-在foxmail等第三方邮箱登陆时候，如何设置地址：" class="headerlink" title="2.在foxmail等第三方邮箱登陆时候，如何设置地址："></a>2.在foxmail等第三方邮箱登陆时候，如何设置地址：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">协议	服务器地址	服务器端口号（常规）	服务器端口号（加密）</div><div class="line">POP3	pop3.mxhichina.com	110	995</div><div class="line">SMTP	smtp.mxhichina.com	25	465</div><div class="line">IMAP	imap.mxhichina.com	143	993</div></pre></td></tr></table></figure>
<hr>
<h4 id="3-阿里个人邮箱，需要自己开通smtp或pop3服务："><a href="#3-阿里个人邮箱，需要自己开通smtp或pop3服务：" class="headerlink" title="3.阿里个人邮箱，需要自己开通smtp或pop3服务："></a>3.阿里个人邮箱，需要自己开通smtp或pop3服务：</h4><p><img src="aliaymail2.png" alt=""></p>
<h4 id="4-阿里个人邮箱的话，地址配置如下："><a href="#4-阿里个人邮箱的话，地址配置如下：" class="headerlink" title="4.阿里个人邮箱的话，地址配置如下："></a>4.阿里个人邮箱的话，地址配置如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">协议	服务器地址	服务器端口号（常规）	服务器端口号（加密）</div><div class="line">POP3	pop3.aliyun.com	110	995</div><div class="line">SMTP	smtp.aliyun.com	25	465</div><div class="line">IMAP	imap.aliyun.com	143	993</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js的prototype与apply讲解]]></title>
      <url>https://yujintang.github.io/2016/07/22/js%E7%9A%84prototype%E4%B8%8Eapply%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">leg</span>) </span>&#123; <span class="comment">//animal类</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</div><div class="line">    <span class="keyword">this</span>.legNum = leg;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chook</span>(<span class="params">leg</span>) </span>&#123;  <span class="comment">//chook类</span></div><div class="line">    <span class="comment">//this.name = 'chook';  //若提前,则会被animal.name 覆盖</span></div><div class="line">    animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">//继承animal</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'chook'</span>;</div><div class="line">&#125;;</div><div class="line">chook.prototype.friend = <span class="string">'dog'</span>;</div><div class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> chook(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(xx); <span class="comment">//chook &#123; name: 'chook', legNum: 2 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(xx.__proto__);  <span class="comment">//chook &#123; friend: 'dog' &#125;</span></div><div class="line"><span class="built_in">console</span>.log(chook.prototype);  <span class="comment">//chook &#123; friend: 'dog'&#125;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL 索引以及时间戳问题]]></title>
      <url>https://yujintang.github.io/2016/07/19/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%B7%BB%E5%8A%A0idx%E5%BA%8F%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/05/04/2294643.html" target="_blank" rel="external">链接</a></p>
<h4 id="查询时候加一个列表索引"><a href="#查询时候加一个列表索引" class="headerlink" title="查询时候加一个列表索引"></a>查询时候加一个列表索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> row_number() <span class="keyword">over</span>() idx, t.*</div><div class="line"><span class="keyword">from</span> (</div><div class="line"><span class="keyword">select</span> corp_id, <span class="keyword">count</span>(*) cnt </div><div class="line"><span class="keyword">from</span> tb_mf_order <span class="keyword">group</span> <span class="keyword">by</span> corp_id</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span> <span class="keyword">desc</span>) t;</div></pre></td></tr></table></figure>
<p>结果如下：<br>| idx  | corp_id  | cnt  |<br>| —- | ——– | —- |<br>| 1    | IT001001 | 150  |<br>| 2    | MN001001 | 51   |<br>| 3    | JZ001001 | 50   |<br>| 4    | GH001001 | 36   |</p>
<h4 id="unix时间戳变为unix日期时间戳"><a href="#unix时间戳变为unix日期时间戳" class="headerlink" title="unix时间戳变为unix日期时间戳"></a>unix时间戳变为unix日期时间戳</h4><p>我们可以直接／ 然后＋，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var timeStamp = 1468857334;</div><div class="line">timeStamp = timeStamp - (timeStamp + 8*60*60)%(24*60*60);</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1468800000</div></pre></td></tr></table></figure></p>
<p>也可以使用postgresql的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var timeStamp = 1468857334;</div><div class="line">extract(epoch from (date_trunc(&apos;day&apos;, to_TIMESTAMP(timeStamp))));</div></pre></td></tr></table></figure></p>
<p>结果：<br>| date_part  |<br>| :——–: |<br>| 1468771200 |</p>
<h5 id="postgre-函数详解"><a href="#postgre-函数详解" class="headerlink" title="postgre 函数详解"></a>postgre 函数详解</h5><h6 id="to-timeStamp-把UNIX纪元转换成时间戳"><a href="#to-timeStamp-把UNIX纪元转换成时间戳" class="headerlink" title="to_timeStamp //把UNIX纪元转换成时间戳"></a>to_timeStamp //把UNIX纪元转换成时间戳</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select to_timestamp(1468857334)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-07-18 23:55:34+08</div></pre></td></tr></table></figure></p>
<h6 id="date-trunc-截断成指定精度"><a href="#date-trunc-截断成指定精度" class="headerlink" title="date_trunc //截断成指定精度"></a>date_trunc //截断成指定精度</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select date_trunc(&apos;day&apos;, timestamp &apos;2016-07-18 23:55:34+08&apos;);</div></pre></td></tr></table></figure>
<p>结果：<br>|     date_trunc      |<br>| :—————–: |<br>| 2016-07-18 00:00:00 |</p>
<h6 id="extract-获取子域"><a href="#extract-获取子域" class="headerlink" title="extract  //获取子域"></a>extract  //获取子域</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select extract(epoch from timestamp&apos;2016-07-18 00:00:00&apos;);</div></pre></td></tr></table></figure>
<p>结果：<br>| date_part  |<br>| :——–: |<br>| 1468800000 |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js里repeat的使用]]></title>
      <url>https://yujintang.github.io/2016/07/17/js%E9%87%8Crepeat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="js-里面如何实现一个str的重复"><a href="#js-里面如何实现一个str的重复" class="headerlink" title="js 里面如何实现一个str的重复"></a>js 里面如何实现一个str的重复</h4><h5 id="先介绍第一个方法："><a href="#先介绍第一个方法：" class="headerlink" title="先介绍第一个方法："></a>先介绍第一个方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(&apos;abc&apos;).repeat(3) //3为重复次数</div><div class="line">&apos;abcabcabc&apos;</div></pre></td></tr></table></figure>
<p>repeat实现方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.repeat = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).join(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="第二种方法，直接使用源码内容"><a href="#第二种方法，直接使用源码内容" class="headerlink" title="第二种方法，直接使用源码内容"></a>第二种方法，直接使用源码内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Array(3+1).join(&apos;abc&apos;) //3为重复次数</div><div class="line">&apos;abcabcabc&apos;</div></pre></td></tr></table></figure>
<p>new Array():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myArray = new Array(n) //创建一个长度为n的数组，可扩展长度</div></pre></td></tr></table></figure></p>
<p>join()方法：将数组放入一个字符串，join里面参数为分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</div><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</div><div class="line">&gt; arr.join(&apos;&apos;)</div><div class="line">&apos;abcd&apos;</div><div class="line">&gt; arr.join(&apos;,&apos;)</div><div class="line">&apos;a,b,c,d&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js 多重循环break]]></title>
      <url>https://yujintang.github.io/2016/07/12/js-%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AFbreak/</url>
      <content type="html"><![CDATA[<h4 id="多重跳转break问题"><a href="#多重跳转break问题" class="headerlink" title="多重跳转break问题"></a>多重跳转break问题</h4><p>给for循环命名，break 后面跟名字，就会跳出该层循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">outer:</div><div class="line">    for(let i = 0; i&lt;= 6; i++) &#123;</div><div class="line">    for(let j = 0; j&lt;= 10; j++) &#123;</div><div class="line">        if(j == 2) &#123;</div><div class="line">            break outer;</div><div class="line">        &#125;</div><div class="line">        console.log(&apos;i=&apos; + i + &apos;; j = &apos; + j);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#####结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i=0; j = 0</div><div class="line">i=0; j = 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[v8debug is not defined问题]]></title>
      <url>https://yujintang.github.io/2016/07/09/v8debug-is-not-defined%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="v8debug-is-not-defined"><a href="#v8debug-is-not-defined" class="headerlink" title="v8debug is not defined"></a>v8debug is not defined</h3><p><em>Node 升级到6.2.2后，使用webstorm会报这个错误，下面是解决方案</em><br><img src="v8Debug1.png" alt="修改内容"><br>在Node parameters 下填写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--expose_debug_as=v8debug</div></pre></td></tr></table></figure></p>
<h3 id="Error-Module-version-mismatch-Expected-问题"><a href="#Error-Module-version-mismatch-Expected-问题" class="headerlink" title="Error: Module version mismatch. Expected 问题"></a>Error: Module version mismatch. Expected 问题</h3><p><em>升级Node后，有些项目会报这个错误，直接更新一下模块就好</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm -rf node_modules/</div><div class="line">$ npm update</div></pre></td></tr></table></figure></p>
<h3 id="n模块版本管理"><a href="#n模块版本管理" class="headerlink" title="n模块版本管理"></a>n模块版本管理</h3><p><em>还有就是一些框架不支持Node最新版本，使用n模块进行Nodejs版本管理是个不错的方法</em><br>1.安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g n</div></pre></td></tr></table></figure></p>
<p>2.查看现有版本  (可以上下键选择版本号)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ n</div></pre></td></tr></table></figure></p>
<p>3.安装其它版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo n 4.4.7</div></pre></td></tr></table></figure></p>
<p>4.安装稳定版或最新版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo n stable 	//稳定版</div><div class="line">$ sudo n latest  	//最新版</div></pre></td></tr></table></figure></p>
<p>5.删除某个版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ n rm 4.4.7</div></pre></td></tr></table></figure></p>
<p>6.指定某个版本执行脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n use 4.4.7 app.js</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mkdir -p 参数的作用]]></title>
      <url>https://yujintang.github.io/2016/07/04/mkdir-p-%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="mkdir-p-的作用"><a href="#mkdir-p-的作用" class="headerlink" title="mkdir -p 的作用"></a>mkdir -p 的作用</h4><p><strong>mkdir的-p选项允许你一次性创建多层次的目录，而不是一次只创建单独的目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p test/&#123;a,b,c,d&#125;/date</div></pre></td></tr></table></figure></p>
<p>这样，就在test 下创建了四个文件下，并且每个文件夹下都有了date文件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh超时处理]]></title>
      <url>https://yujintang.github.io/2016/06/28/ssh%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="ssh处理超时连接"><a href="#ssh处理超时连接" class="headerlink" title="ssh处理超时连接"></a>ssh处理超时连接</h3><p><em>ssh远程连接，经常会发生一些超时的情况，调整ssh的两个配置内容，就可以讲自动超时问题解决</em></p>
<h4 id="编辑ssh配置文件"><a href="#编辑ssh配置文件" class="headerlink" title="编辑ssh配置文件"></a>编辑ssh配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<h4 id="修改配置内容"><a href="#修改配置内容" class="headerlink" title="修改配置内容"></a>修改配置内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ClientAliveInterval 0</div><div class="line">#ClientAliveCountMax 3</div><div class="line"></div><div class="line">修改为：</div><div class="line"></div><div class="line">ClientAliveInterval 60 //服务器端向客户的发送监测是否活跃消息的时间间隔</div><div class="line">ClientAliveCountMax 3  //服务器可接受的客户端未响应次数</div></pre></td></tr></table></figure>
<h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><blockquote>
<p>os x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist </div><div class="line">sudo launchctl load /System/Library/LaunchDaemons/ssh.plist</div></pre></td></tr></table></figure></p>
<p>linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service sshd restart</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器互相验证－authorized_keys]]></title>
      <url>https://yujintang.github.io/2016/06/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%92%E7%9B%B8%E9%AA%8C%E8%AF%81%EF%BC%8Dauthorized-keys/</url>
      <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><strong>在使用ssh 登陆 阿里云服务器时候，每次都会出现 要求输入用户密码的时候，使用authorized_keys  互相验证，可解决这个问题</strong></p>
<h4 id="1-在本地创建ssh密钥："><a href="#1-在本地创建ssh密钥：" class="headerlink" title="1.在本地创建ssh密钥："></a>1.在本地创建ssh密钥：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 	ssh-keygen -t rsa -C &quot;shanquan54@163.com&quot;</div></pre></td></tr></table></figure>
<h4 id="2-将本地公钥复制到远程服务器上"><a href="#2-将本地公钥复制到远程服务器上" class="headerlink" title="2.将本地公钥复制到远程服务器上"></a>2.将本地公钥复制到远程服务器上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 	scp id_rsa.pub root@120.27.115.24:~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<h4 id="3-这样，就可以无密码访问远程服务器了，如果有多个，以追加方式-写入authorized-keys"><a href="#3-这样，就可以无密码访问远程服务器了，如果有多个，以追加方式-写入authorized-keys" class="headerlink" title="3.这样，就可以无密码访问远程服务器了，如果有多个，以追加方式 写入authorized_keys"></a>3.这样，就可以无密码访问远程服务器了，如果有多个，以追加方式 写入authorized_keys</h4><h4 id="4-如果还是不可以，就需要对远程-ssh-修改权限，和恢复文件的安全上下文"><a href="#4-如果还是不可以，就需要对远程-ssh-修改权限，和恢复文件的安全上下文" class="headerlink" title="4.如果还是不可以，就需要对远程.ssh 修改权限，和恢复文件的安全上下文"></a>4.如果还是不可以，就需要对远程.ssh 修改权限，和恢复文件的安全上下文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ 	chmod 700 /root/.ssh</div><div class="line">	chmod 600 /root/.ssh/authorized_keys</div><div class="line">	restorecon -R -v /root/.ssh</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[makedown使用]]></title>
      <url>https://yujintang.github.io/2016/06/24/makedown%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="makedown-语法"><a href="#makedown-语法" class="headerlink" title="makedown 语法"></a>makedown 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1. 分段： 两个回车</div><div class="line">2. 换行 两个空格 + 回车</div><div class="line">3. 标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</div><div class="line">4. 引用 &gt;</div><div class="line">5. 列表 *，+，-，1.，选其中之一，注意后面有个空格</div><div class="line">6. 代码区块 四个空格开头</div><div class="line">7. 链接 [文字](链接地址)</div><div class="line">8. 图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址</div><div class="line">9. 强调 **文字**，__文字__，_文字_，*文字*</div><div class="line">10. 代码 ```，``</div></pre></td></tr></table></figure>
<h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><blockquote>
<p>推荐typora  <strong><em>[下载地址] (<a href="http://www.typora.io/" target="_blank" rel="external">http://www.typora.io/</a>)</em></strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[moment当日零点时间戳问题]]></title>
      <url>https://yujintang.github.io/2016/06/24/moment%E5%BD%93%E6%97%A5%E9%9B%B6%E7%82%B9%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="moment-js-获取零点时间戳"><a href="#moment-js-获取零点时间戳" class="headerlink" title="moment.js 获取零点时间戳"></a>moment.js 获取零点时间戳</h2><blockquote>
<p><a href="http://momentjs.cn/docs/" target="_blank" rel="external">moment 官方网站</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let now = moment().format(&apos;YYYY-MM-DD&apos;);</div><div class="line">let zero = moment(now).format(&apos;YYYY-MM-DD HH:mm:ss&apos;);</div><div class="line">let today = moment(zero).toDate().getTime();</div><div class="line">let yesterday = moment(today).subtract(1, &apos;days&apos;).format(&apos;x&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sequelize的基本使用]]></title>
      <url>https://yujintang.github.io/2016/06/20/sequelize%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://docs.sequelizejs.com/en/latest/" target="_blank" rel="external">sequelize官方文档</a><br><a href="http://itbilu.com/nodejs/npm/VkYIaRPz-.html" target="_blank" rel="external">参考文章1</a><br><a href="http://itbilu.com/nodejs/npm/V1PExztfb.html" target="_blank" rel="external">参考文章2</a><br><a href="http://itbilu.com/nodejs/npm/41qaV3czb.html" target="_blank" rel="external">参考文章3</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install sequelize --save</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>启动一个事物，可以在多个数据库操作时具有失败会滚效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sequelize.transaction(function (t) &#123; </div><div class="line">  // 注意，这时使用的是callback而不是promise.then()</div><div class="line">  return User.find(..., &#123; transaction: t&#125;).then(function (user) &#123;</div><div class="line">    return user.updateAttributes(..., &#123; transaction: t&#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;).then(function () &#123;</div><div class="line">  // Committed</div><div class="line">&#125;).catch(function (err) &#123;</div><div class="line">  // Rolled back</div><div class="line">  console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>过滤语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">where:判断的字段  attributes:返回的内容 include: 多表 limit:返回最大个数 offset:忽略前几条数据</div></pre></td></tr></table></figure></p>
<h5 id="findAll查询多条数据，返回数组"><a href="#findAll查询多条数据，返回数组" class="headerlink" title="findAll查询多条数据，返回数组"></a>findAll查询多条数据，返回数组</h5><blockquote>
<p>相关：findOne 查找单挑数据，findById 根据id查找，count 统计个数， findAndCount 返回rows和count<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Model.findAll(&#123;</div><div class="line">  where: &#123;</div><div class="line">    attr1: 42,</div><div class="line">    attr2: &apos;cake&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">// WHERE attr1 = 42 AND attr2 = &apos;cake&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>#####save 保存某条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="创建一个持久化的对象"><a href="#创建一个持久化的对象" class="headerlink" title="创建一个持久化的对象"></a>创建一个持久化的对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Task.create(&#123; title: <span class="string">'foo'</span>, description: <span class="string">'bar'</span>, deadline: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">task</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里可以通过task参数访问新创建的task对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="修改保存一个持久化对象"><a href="#修改保存一个持久化对象" class="headerlink" title="修改保存一个持久化对象"></a>修改保存一个持久化对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对task对象赋值，然后调用save方法，fields说明参与修改的字段</span></div><div class="line">task.title = <span class="string">'foooo'</span></div><div class="line">task.description = <span class="string">'baaaaaar'</span></div><div class="line">task.save(&#123;fields: [<span class="string">'title'</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// title变成'foooo'，但是description没有变化</span></div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// 对task对象调用update方法，参数1中说明需要修改的字段， 参数2的fields说明参与修改的字段</span></div><div class="line">task.update(&#123; title: <span class="string">'foooo'</span>, description: <span class="string">'baaaaaar'</span>&#125;, &#123;fields: [<span class="string">'title'</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// title变成'foooo'，但是description没有变化</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Task.create(&#123; title: <span class="string">'a task'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">task</span>) </span>&#123;</div><div class="line">  <span class="comment">// now you see me...</span></div><div class="line">  <span class="keyword">return</span> task.destroy();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// now i'm gone :)</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>如果paranoid配置为true，不会产生真正的删除，而是在deletedAt字段上标记当前的时间戳，可以用task.destroy({ force: true })强制删除</p>
</blockquote>
<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">User.bulkCreate([</div><div class="line">  &#123; username: <span class="string">'barfooz'</span>, isAdmin: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; username: <span class="string">'foo'</span>, isAdmin: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; username: <span class="string">'bar'</span>, isAdmin: <span class="literal">false</span> &#125;</div><div class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123; <span class="comment">// 注意：官方文档提示这里没有返回结果，如果要获取返回结果需要重新查询，实际使用时在PostgreSQL中能返回创建的结果集，估计只有支持returning的数据库才有返回值：</span></div><div class="line">  <span class="keyword">return</span> User.findAll();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(users)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="一次性修改多条记录"><a href="#一次性修改多条记录" class="headerlink" title="一次性修改多条记录"></a>一次性修改多条记录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Task.update(</div><div class="line">    &#123; status: <span class="string">'inactive'</span> &#125;, <span class="comment">/* set attributes' value */</span>,</div><div class="line">    &#123; where: &#123; subject: <span class="string">'programming'</span> &#125;&#125; <span class="comment">/* where criteria */</span></div><div class="line">  ).spread(<span class="function"><span class="keyword">function</span>(<span class="params">affectedCount, affectedRows</span>) </span>&#123;</div><div class="line">  <span class="comment">// .update返回一个包含affectedCount和affectedRows的数组，所以需要使用spread进行</span></div><div class="line">  <span class="comment">// affectedRows只有支持returning: true的数据库才起作用</span></div><div class="line"></div><div class="line">  <span class="comment">// affectedCount will be 2</span></div><div class="line">  <span class="keyword">return</span> Task.findAll();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="一次性删除多条记录"><a href="#一次性删除多条记录" class="headerlink" title="一次性删除多条记录"></a>一次性删除多条记录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Task.destroy(&#123;</div><div class="line">    where: &#123;</div><div class="line">      subject: <span class="string">'programming'</span></div><div class="line">    &#125;,</div><div class="line">    truncate: <span class="literal">true</span> <span class="comment">/* 此时会忽略where条件，执行truncate操作，慎用！ */</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">affectedRows</span>) </span>&#123;</div><div class="line">  <span class="comment">// affectedRows will be 2</span></div><div class="line">  <span class="keyword">return</span> Task.findAll();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="原始SQL查询"><a href="#原始SQL查询" class="headerlink" title="原始SQL查询"></a>原始SQL查询</h4><p><a href="http://sequelize.readthedocs.io/en/latest/docs/raw-queries/" target="_blank" rel="external">官方参考</a></p>
<p>通过sequelize.query方法执行原始的SQL语句：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">"SELECT * FROM `users`"</span>, &#123; type: sequelize.QueryTypes.SELECT&#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回user的数组</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>如果第二个参数传递了一个Model，返回结果会变成这个Model的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects'</span>, &#123; model: Projects &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>)</span>&#123;</div><div class="line">  <span class="comment">// projects数组中每个都是Project的对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用replacements传递SQL中的参数，有2种方式： 有名字的参数（：开头，推荐使用）和无名字的参数（？）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects WHERE status = ?'</span>,</div><div class="line">  &#123; replacements: [<span class="string">'active'</span>], type: sequelize.QueryTypes.SELECT &#125;</div><div class="line">).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(projects)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects WHERE status = :status '</span>,</div><div class="line">  &#123; replacements: &#123; status: <span class="string">'active'</span> &#125;, type: sequelize.QueryTypes.SELECT &#125;</div><div class="line">).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(projects)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[post传递数组问题]]></title>
      <url>https://yujintang.github.io/2016/06/20/post%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>###前端post方法传递数组<br>前端post方法传递数组arr时候，会出现后端接受到后数组名变为arr[]，解决方法如下：</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  url: &apos;c/info_nickname.do&apos;,</div><div class="line">  data: JSON.stringify(&#123;nickname: &apos;ABC&apos;, a: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&#125;),</div><div class="line">  success: function(result)&#123;console.log(result)&#125;,</div><div class="line">  dataType: &apos;json&apos;,</div><div class="line">  type: &apos;POST&apos;,</div><div class="line">  contentType: &apos;application/json&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lodash基本使用]]></title>
      <url>https://yujintang.github.io/2016/06/20/lodash%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://lodashjs.com/docs/" target="_blank" rel="external">参考地址</a></p>
</blockquote>
<hr>
<h3 id="merge-合并对象"><a href="#merge-合并对象" class="headerlink" title="_.merge    合并对象"></a>_.merge    合并对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var users = &#123;</div><div class="line">  &apos;data&apos;: [&#123; &apos;user&apos;: &apos;barney&apos; &#125;, &#123; &apos;user&apos;: &apos;fred&apos; &#125;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var ages = &#123;</div><div class="line">  &apos;data&apos;: [&#123; &apos;age&apos;: 36 &#125;, &#123; &apos;age&apos;: 40 &#125;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.merge(users, ages);</div><div class="line">// =&gt; &#123; &apos;data&apos;: [&#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 &#125;, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;] &#125;</div><div class="line"></div><div class="line">// using a customizer callback</div><div class="line">var object = &#123;</div><div class="line">  &apos;fruits&apos;: [&apos;apple&apos;],</div><div class="line">  &apos;vegetables&apos;: [&apos;beet&apos;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var other = &#123;</div><div class="line">  &apos;fruits&apos;: [&apos;banana&apos;],</div><div class="line">  &apos;vegetables&apos;: [&apos;carrot&apos;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.merge(object, other, function(a, b) &#123;</div><div class="line">  if (_.isArray(a)) &#123;</div><div class="line">    return a.concat(b);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">// =&gt; &#123; &apos;fruits&apos;: [&apos;apple&apos;, &apos;banana&apos;], &apos;vegetables&apos;: [&apos;beet&apos;, &apos;carrot&apos;] &#125;</div></pre></td></tr></table></figure>
<h3 id="omit-从对象中删除某个属性"><a href="#omit-从对象中删除某个属性" class="headerlink" title="_.omit  从对象中删除某个属性"></a>_.omit  从对象中删除某个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;;</div><div class="line"></div><div class="line">_.omit(object, &apos;age&apos;);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div><div class="line"></div><div class="line">_.omit(object, _.isNumber);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div></pre></td></tr></table></figure>
<h3 id="pick-从对象中增加某个属性"><a href="#pick-从对象中增加某个属性" class="headerlink" title="_.pick 从对象中增加某个属性"></a>_.pick 从对象中增加某个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;;</div><div class="line"></div><div class="line">_.pick(object, &apos;user&apos;);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div><div class="line"></div><div class="line">_.pick(object, _.isString);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div></pre></td></tr></table></figure>
<h3 id="set-设置对象的某个属性值"><a href="#set-设置对象的某个属性值" class="headerlink" title="_.set  设置对象的某个属性值"></a>_.set  设置对象的某个属性值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;a&apos;: [&#123; &apos;b&apos;: &#123; &apos;c&apos;: 3 &#125; &#125;] &#125;;</div><div class="line"></div><div class="line">_.set(object, &apos;a[0].b.c&apos;, 4);</div><div class="line">console.log(object.a[0].b.c);</div><div class="line">// =&gt; 4</div><div class="line"></div><div class="line">_.set(object, &apos;x[0].y.z&apos;, 5);</div><div class="line">console.log(object.x[0].y.z);</div><div class="line">// =&gt; 5</div></pre></td></tr></table></figure>
<h3 id="cloneDeep-深度克隆"><a href="#cloneDeep-深度克隆" class="headerlink" title="_.cloneDeep    深度克隆"></a>_.cloneDeep    深度克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var objA = &#123;</div><div class="line">	&quot;name&quot;: &quot;colin&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Normal method? Too long. See Stackoverflow for solution: http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript</div><div class="line"></div><div class="line">// Lodash</div><div class="line">var objB = _.cloneDeep(objA);</div><div class="line">objB === objA // false</div></pre></td></tr></table></figure>
<h3 id="findKey-选择查找属性"><a href="#findKey-选择查找属性" class="headerlink" title="_.findKey    选择查找属性"></a>_.findKey    选择查找属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var users = &#123;</div><div class="line">  &apos;barney&apos;:  &#123; &apos;age&apos;: 36, &apos;active&apos;: true &#125;,</div><div class="line">  &apos;fred&apos;:    &#123; &apos;age&apos;: 40, &apos;active&apos;: false &#125;,</div><div class="line">  &apos;pebbles&apos;: &#123; &apos;age&apos;: 1,  &apos;active&apos;: true &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.findKey(users, function(chr) &#123;</div><div class="line">  return chr.age &lt; 40;</div><div class="line">&#125;);</div><div class="line">// =&gt; &apos;barney&apos; (iteration order is not guaranteed)</div><div class="line"></div><div class="line">// using the `_.matches` callback shorthand</div><div class="line">_.findKey(users, &#123; &apos;age&apos;: 1, &apos;active&apos;: true &#125;);</div><div class="line">// =&gt; &apos;pebbles&apos;</div><div class="line"></div><div class="line">// using the `_.matchesProperty` callback shorthand</div><div class="line">_.findKey(users, &apos;active&apos;, false);</div><div class="line">// =&gt; &apos;fred&apos;</div><div class="line"></div><div class="line">// using the `_.property` callback shorthand</div><div class="line">_.findKey(users, &apos;active&apos;);</div><div class="line">// =&gt; &apos;barney&apos;</div></pre></td></tr></table></figure>
<h3 id="transform-返回一个修改后的对象"><a href="#transform-返回一个修改后的对象" class="headerlink" title="_.transform 返回一个修改后的对象"></a>_.transform 返回一个修改后的对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">_.transform([2, 3, 4], function(result, n) &#123;</div><div class="line">  result.push(n *= n);</div><div class="line">  return n % 2 == 0;</div><div class="line">&#125;);</div><div class="line">// =&gt; [4, 9]</div><div class="line"></div><div class="line">_.transform(&#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;, function(result, n, key) &#123;</div><div class="line">  result[key] = n * 3;</div><div class="line">&#125;);</div><div class="line">// =&gt; &#123; &apos;a&apos;: 3, &apos;b&apos;: 6 &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Nodemon在webstorm的使用]]></title>
      <url>https://yujintang.github.io/2016/08/18/Nodemon%E5%9C%A8webstorm%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="nodemon在命令行的使用"><a href="#nodemon在命令行的使用" class="headerlink" title="nodemon在命令行的使用"></a>nodemon在命令行的使用</h2><h3 id="nodemon安装"><a href="#nodemon安装" class="headerlink" title="nodemon安装"></a>nodemon安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodemon</div></pre></td></tr></table></figure>
<h3 id="命令行运行，代替node"><a href="#命令行运行，代替node" class="headerlink" title="命令行运行，代替node"></a>命令行运行，代替node</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon app.js</div></pre></td></tr></table></figure>
<h3 id="可指定端口号，如果应用中没有指定的话"><a href="#可指定端口号，如果应用中没有指定的话" class="headerlink" title="可指定端口号，如果应用中没有指定的话"></a>可指定端口号，如果应用中没有指定的话</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon app.js localhost 3001</div></pre></td></tr></table></figure>
<h3 id="debug-模式"><a href="#debug-模式" class="headerlink" title="debug 模式"></a>debug 模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon --debug app.js</div></pre></td></tr></table></figure>
<h3 id="查看使用文档"><a href="#查看使用文档" class="headerlink" title="查看使用文档"></a>查看使用文档</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon -h</div></pre></td></tr></table></figure>
<h2 id="nodemon-在webstorm中的使用"><a href="#nodemon-在webstorm中的使用" class="headerlink" title="nodemon 在webstorm中的使用"></a>nodemon 在webstorm中的使用</h2><h3 id="非debug模式，Node-parameters：修改：（mac下）"><a href="#非debug模式，Node-parameters：修改：（mac下）" class="headerlink" title="非debug模式，Node parameters：修改：（mac下）"></a>非debug模式，Node parameters：修改：（mac下）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/node_modules/nodemon/bin/nodemon.js</div></pre></td></tr></table></figure>
<p>()[2.jpeg]</p>
<h3 id="debug模式，Node-parameters：修改：（mac下）"><a href="#debug模式，Node-parameters：修改：（mac下）" class="headerlink" title="debug模式，Node parameters：修改：（mac下）"></a>debug模式，Node parameters：修改：（mac下）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/lib/node_modules/nodemon/bin/nodemon.js --debug</div></pre></td></tr></table></figure>
<p>()[1.jpeg]</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git的使用]]></title>
      <url>https://yujintang.github.io/2016/08/16/git%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p><a href="https://gist.github.com/ergatea/646d0e7915e59b580bd58eb4015ada9e" target="_blank" rel="external">原地址入口</a><br><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰教程</a></p>
<h2 id="git的基本使用"><a href="#git的基本使用" class="headerlink" title="git的基本使用"></a>git的基本使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</div><div class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</div><div class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</div><div class="line">git config --global color.ui true                         # git status等命令自动着色</div><div class="line">git config --global color.status auto</div><div class="line">git config --global color.diff auto</div><div class="line">git config --global color.branch auto</div><div class="line">git config --global color.interactive auto</div><div class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</div><div class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</div><div class="line">git status                                                # 查看当前版本状态（是否修改）</div><div class="line">git add xyz                                               # 添加xyz文件至index</div><div class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</div><div class="line">git commit -m &apos;xxx&apos;                                       # 提交</div><div class="line">git commit --amend -m &apos;xxx&apos;                               # 合并上一次提交（用于反复修改）</div><div class="line">git commit -am &apos;xxx&apos;                                      # 将add和commit合为一步</div><div class="line">git rm xxx                                                # 删除index中的文件</div><div class="line">git rm -r *                                               # 递归删除</div><div class="line">git log                                                   # 显示提交日志</div><div class="line">git log -1                                                # 显示1行日志 -n为n行</div><div class="line">git log -5</div><div class="line">git log --stat                                            # 显示提交日志及相关变动文件</div><div class="line">git log -p -m</div><div class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</div><div class="line">git show dfb02                                            # 可只用commitid的前几位</div><div class="line">git show HEAD                                             # 显示HEAD提交日志</div><div class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</div><div class="line">git tag                                                   # 显示已存在的tag</div><div class="line">git tag -a v2.0 -m &apos;xxx&apos;                                  # 增加v2.0的tag</div><div class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</div><div class="line">git log v2.0                                              # 显示v2.0的日志</div><div class="line">git diff                                                  # 显示所有未添加至index的变更</div><div class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</div><div class="line">git diff HEAD^                                            # 比较与上一个版本的差异</div><div class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</div><div class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</div><div class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</div><div class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</div><div class="line">git branch                                                # 显示本地分支</div><div class="line">git branch --contains 50089                               # 显示包含提交50089的分支</div><div class="line">git branch -a                                             # 显示所有分支</div><div class="line">git branch -r                                             # 显示所有原创分支</div><div class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</div><div class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</div><div class="line">git branch -m master master_copy                          # 本地分支改名</div><div class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</div><div class="line">git checkout -b master master_copy                        # 上面的完整版</div><div class="line">git checkout features/performance                         # 检出已存在的features/performance分支</div><div class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</div><div class="line">git checkout v2.0                                         # 检出版本v2.0</div><div class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</div><div class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</div><div class="line">git merge origin/master                                   # 合并远程master分支至当前分支</div><div class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</div><div class="line">git push origin master                                    # 将当前分支push到远程master分支</div><div class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</div><div class="line">git push --tags                                           # 把所有tag推送到远程仓库</div><div class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</div><div class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</div><div class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</div><div class="line">git mv README README2                                     # 重命名文件README为README2</div><div class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</div><div class="line">git rebase</div><div class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</div><div class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</div><div class="line">git ls-files                                              # 列出git index包含的文件</div><div class="line">git show-branch                                           # 图示当前分支历史</div><div class="line">git show-branch --all                                     # 图示所有分支历史</div><div class="line">git whatchanged                                           # 显示提交历史对应的文件修改</div><div class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</div><div class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</div><div class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</div><div class="line">git reflog                                                # 显示所有提交，包括孤立节点</div><div class="line">git show HEAD@&#123;5&#125;</div><div class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</div><div class="line">git log --pretty=format:&apos;%h %s&apos; --graph                   # 图示提交日志</div><div class="line">git show HEAD~3</div><div class="line">git show -s --pretty=raw 2be7fcb476</div><div class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</div><div class="line">git stash list                                            # 查看所有暂存</div><div class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</div><div class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</div><div class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</div><div class="line">git grep -e &apos;#define&apos; --and -e SORT_DIRENT</div><div class="line">git gc</div><div class="line">git fsck</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Process.nextTick与setlmmediate区别]]></title>
      <url>https://yujintang.github.io/2016/08/15/Process-nextTick%E4%B8%8Esetlmmediate%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h2 id="setTimeout-与setInterVal-函数"><a href="#setTimeout-与setInterVal-函数" class="headerlink" title="setTimeout()与setInterVal()函数"></a>setTimeout()与setInterVal()函数</h2><ul>
<li>setTimeout()与setInterVal() 区别在于执行次数</li>
<li>setTimeout()只是将事件插入了”任务队列”，必须等到当前代码（执行栈）执行完，主线程才会去执行它指定的回调函数。要是当前代码耗时很长，有可能要等很久，所以并没有办法保证，回调函数一定会在setTimeout()指定的时间执行。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'0秒 setTimeout'</span>)</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="string">'1'</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1秒 setTimeout A'</span>)</div><div class="line">&#125;,<span class="number">1000</span>);</div><div class="line"></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1秒 setTimeout B '</span>)</div><div class="line">&#125;,<span class="number">1000</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line"></div><div class="line"><span class="comment">//answer</span></div><div class="line"><span class="number">1</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">0</span>秒 setTimeout</div><div class="line"><span class="number">1</span>秒 setTimeout A</div><div class="line"><span class="number">1</span>秒 setTimeout B</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Process-nextTick-与setImmediate区别"><a href="#Process-nextTick-与setImmediate区别" class="headerlink" title="Process.nextTick 与setImmediate区别"></a>Process.nextTick 与setImmediate区别</h2><p><img src="1.jpeg" alt=""></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用nginx反向代理]]></title>
      <url>https://yujintang.github.io/2016/08/06/%E4%BD%BF%E7%94%A8nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<hr>
<p>遇到的问题： 静态页面放到阿里云，如何使浏览器能够请求，ajax跨域访问服务器内容 </p>
<hr>
<h4 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h4><blockquote>
<p>阿里云服务器centos7环境</p>
<h5 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install nginx</div></pre></td></tr></table></figure>
</blockquote>
<h5 id="nginx-升级"><a href="#nginx-升级" class="headerlink" title="nginx 升级"></a>nginx 升级</h5><blockquote>
<p>如果你的nginx要使用最新稳定版，可以进行升级</p>
</blockquote>
<h6 id="配置nginx-源"><a href="#配置nginx-源" class="headerlink" title="配置nginx 源"></a>配置nginx 源</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/yum.repos.d/nginx.repo</div></pre></td></tr></table></figure>
<h6 id="将下面内容写入"><a href="#将下面内容写入" class="headerlink" title="将下面内容写入"></a>将下面内容写入</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#nginx.repo  </div><div class="line"></div><div class="line">[nginx]  </div><div class="line">name=nginx repo  </div><div class="line">baseurl=http://nginx.org/packages/centos/7/$basearch/  </div><div class="line">gpgcheck=0  </div><div class="line">enabled=1</div></pre></td></tr></table></figure>
<h6 id="进行升级"><a href="#进行升级" class="headerlink" title="进行升级"></a>进行升级</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum update nginx</div></pre></td></tr></table></figure>
<h4 id="如何访问静态页面"><a href="#如何访问静态页面" class="headerlink" title="如何访问静态页面"></a>如何访问静态页面</h4><h5 id="将静态页面放入阿里云某文件下：如：-opt-client-然后配置nginx"><a href="#将静态页面放入阿里云某文件下：如：-opt-client-然后配置nginx" class="headerlink" title="将静态页面放入阿里云某文件下：如：/opt/client/, 然后配置nginx"></a>将静态页面放入阿里云某文件下：如：/opt/client/, 然后配置nginx</h5><h6 id="打开配置文件"><a href="#打开配置文件" class="headerlink" title="打开配置文件"></a>打开配置文件</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<h6 id="写入如下配置"><a href="#写入如下配置" class="headerlink" title="写入如下配置"></a>写入如下配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">   location / &#123;</div><div class="line">           root   /opt/client;</div><div class="line">           index  index.html index.htm;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl restart nginx</div></pre></td></tr></table></figure>
<h6 id="阿里云的坑"><a href="#阿里云的坑" class="headerlink" title="阿里云的坑"></a>阿里云的坑</h6><ul>
<li>不能放在／root／下，会报403错，尝试了一下 user root; 无效<h4 id="如何让前端访问服务器"><a href="#如何让前端访问服务器" class="headerlink" title="如何让前端访问服务器"></a>如何让前端访问服务器</h4><h5 id="前端访问"><a href="#前端访问" class="headerlink" title="前端访问"></a>前端访问</h5></li>
<li>页面位置：/opt/client/login.html</li>
<li>ajax post 请求位置：/api/users/login</li>
<li>服务器提供接口： ／127.0.0.1:3000/users/login<h6 id="前端ajax-请求代码"><a href="#前端ajax-请求代码" class="headerlink" title="前端ajax 请求代码"></a>前端ajax 请求代码</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(&apos;api/users/login&apos;, &#123;account: account, password: password&#125;, function (result) &#123;</div><div class="line">         </div><div class="line">        &#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h6 id="nginx-写入配置"><a href="#nginx-写入配置" class="headerlink" title="nginx  写入配置"></a>nginx  写入配置</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//打开配置文件</div><div class="line">$ vim /etc/nginx/nginx.conf</div><div class="line">//写入如下配置</div><div class="line">       	location ^~/api/ &#123;</div><div class="line">        	rewrite ^/api/(.*)$ /$1 break;</div><div class="line">        	proxy_pass http://127.0.0.1:3000;</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h6 id="重启nginx-1"><a href="#重启nginx-1" class="headerlink" title="重启nginx"></a>重启nginx</h6><h6 id="访问127-0-0-1-80-login-html"><a href="#访问127-0-0-1-80-login-html" class="headerlink" title="访问127.0.0.1:80/login.html"></a>访问127.0.0.1:80/login.html</h6>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[linux下git安装]]></title>
      <url>https://yujintang.github.io/2016/08/02/linux%E4%B8%8Bgit%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<blockquote>
<p>centos 7系统</p>
</blockquote>
<h4 id="1-更新系统"><a href="#1-更新系统" class="headerlink" title="1.更新系统"></a>1.更新系统</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update</div></pre></td></tr></table></figure>
<h4 id="2-安装依赖包"><a href="#2-安装依赖包" class="headerlink" title="2.安装依赖包"></a>2.安装依赖包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</div></pre></td></tr></table></figure>
<h4 id="3-下载git源码"><a href="#3-下载git源码" class="headerlink" title="3.下载git源码"></a>3.下载git源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ wget https://github.com/git/git/archive/v2.3.0.zip</div><div class="line">$ unzip v2.3.0.zip</div><div class="line">$ cd git-2.3.0</div></pre></td></tr></table></figure>
<h4 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ make prefix=/usr/local/git all</div><div class="line">$ sudo make prefix=/usr/local/git install</div></pre></td></tr></table></figure>
<h4 id="5-查看git所在路径："><a href="#5-查看git所在路径：" class="headerlink" title="5.查看git所在路径："></a>5.查看git所在路径：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ whereis git</div><div class="line">git: /usr/bin/git /usr/local/git /usr/share/man/man1/git.1.gz</div></pre></td></tr></table></figure>
<h4 id="6-git添加到环境变量"><a href="#6-git添加到环境变量" class="headerlink" title="6.git添加到环境变量"></a>6.git添加到环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/profile</div><div class="line">／／最后一行添加</div><div class="line">export PATH=/usr/local/git/bin:$PATH</div><div class="line">／／应用</div><div class="line">$ source /etc/profile</div></pre></td></tr></table></figure>
<h4 id="7-设置git"><a href="#7-设置git" class="headerlink" title="7.设置git"></a>7.设置git</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name &quot;Your Name&quot;</div><div class="line">git config --global user.email &quot;youremail@domain.com&quot;</div></pre></td></tr></table></figure>
<h4 id="8-创建ssh－keys"><a href="#8-创建ssh－keys" class="headerlink" title="8.创建ssh－keys"></a>8.创建ssh－keys</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//检查是否存在 </div><div class="line">$ ls -al ~/.ssh</div><div class="line"></div><div class="line">//生成ssh－keygen </div><div class="line">$ ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</div><div class="line"></div><div class="line">//Adding your SSH key to the ssh-agent</div><div class="line">//Ensure ssh-agent is enabled:</div><div class="line">$ eval &quot;$(ssh-agent -s)&quot;</div><div class="line"></div><div class="line">//Add your SSH key to the ssh-agent</div><div class="line">$ ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[阿里（万网）企业邮箱如何使用foxmail等第三方登陆]]></title>
      <url>https://yujintang.github.io/2016/08/01/%E9%98%BF%E9%87%8C%E4%BC%81%E4%B8%9A%E9%82%AE%E7%AE%B1%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8foxmail%E7%AD%89%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E9%99%86/</url>
      <content type="html"><![CDATA[<h4 id="1-如何开启smtp或pop3"><a href="#1-如何开启smtp或pop3" class="headerlink" title="1.如何开启smtp或pop3"></a>1.如何开启smtp或pop3</h4><p>smtp或pop3是企业邮箱管理员在创建你的账号创建时候设置是否开启的，而一般情况你的smtp和pop3也是默认开启的。<br><img src="aliaymail.png" alt=""></p>
<h4 id="2-在foxmail等第三方邮箱登陆时候，如何设置地址："><a href="#2-在foxmail等第三方邮箱登陆时候，如何设置地址：" class="headerlink" title="2.在foxmail等第三方邮箱登陆时候，如何设置地址："></a>2.在foxmail等第三方邮箱登陆时候，如何设置地址：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">协议	服务器地址	服务器端口号（常规）	服务器端口号（加密）</div><div class="line">POP3	pop3.mxhichina.com	110	995</div><div class="line">SMTP	smtp.mxhichina.com	25	465</div><div class="line">IMAP	imap.mxhichina.com	143	993</div></pre></td></tr></table></figure>
<hr>
<h4 id="3-阿里个人邮箱，需要自己开通smtp或pop3服务："><a href="#3-阿里个人邮箱，需要自己开通smtp或pop3服务：" class="headerlink" title="3.阿里个人邮箱，需要自己开通smtp或pop3服务："></a>3.阿里个人邮箱，需要自己开通smtp或pop3服务：</h4><p><img src="aliaymail2.png" alt=""></p>
<h4 id="4-阿里个人邮箱的话，地址配置如下："><a href="#4-阿里个人邮箱的话，地址配置如下：" class="headerlink" title="4.阿里个人邮箱的话，地址配置如下："></a>4.阿里个人邮箱的话，地址配置如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">协议	服务器地址	服务器端口号（常规）	服务器端口号（加密）</div><div class="line">POP3	pop3.aliyun.com	110	995</div><div class="line">SMTP	smtp.aliyun.com	25	465</div><div class="line">IMAP	imap.aliyun.com	143	993</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js的prototype与apply讲解]]></title>
      <url>https://yujintang.github.io/2016/07/22/js%E7%9A%84prototype%E4%B8%8Eapply%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<hr>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">animal</span>(<span class="params">leg</span>) </span>&#123; <span class="comment">//animal类</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'animal'</span>;</div><div class="line">    <span class="keyword">this</span>.legNum = leg;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">chook</span>(<span class="params">leg</span>) </span>&#123;  <span class="comment">//chook类</span></div><div class="line">    <span class="comment">//this.name = 'chook';  //若提前,则会被animal.name 覆盖</span></div><div class="line">    animal.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>); <span class="comment">//继承animal</span></div><div class="line">    <span class="keyword">this</span>.name = <span class="string">'chook'</span>;</div><div class="line">&#125;;</div><div class="line">chook.prototype.friend = <span class="string">'dog'</span>;</div><div class="line"><span class="keyword">var</span> xx = <span class="keyword">new</span> chook(<span class="number">2</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(xx); <span class="comment">//chook &#123; name: 'chook', legNum: 2 &#125;</span></div><div class="line"><span class="built_in">console</span>.log(xx.__proto__);  <span class="comment">//chook &#123; friend: 'dog' &#125;</span></div><div class="line"><span class="built_in">console</span>.log(chook.prototype);  <span class="comment">//chook &#123; friend: 'dog'&#125;</span></div></pre></td></tr></table></figure>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[PostgreSQL 索引以及时间戳问题]]></title>
      <url>https://yujintang.github.io/2016/07/19/sql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E6%B7%BB%E5%8A%A0idx%E5%BA%8F%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/stephen-liu74/archive/2012/05/04/2294643.html" target="_blank" rel="external">链接</a></p>
<h4 id="查询时候加一个列表索引"><a href="#查询时候加一个列表索引" class="headerlink" title="查询时候加一个列表索引"></a>查询时候加一个列表索引</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> row_number() <span class="keyword">over</span>() idx, t.*</div><div class="line"><span class="keyword">from</span> (</div><div class="line"><span class="keyword">select</span> corp_id, <span class="keyword">count</span>(*) cnt </div><div class="line"><span class="keyword">from</span> tb_mf_order <span class="keyword">group</span> <span class="keyword">by</span> corp_id</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span> <span class="keyword">desc</span>) t;</div></pre></td></tr></table></figure>
<p>结果如下：<br>| idx  | corp_id  | cnt  |<br>| —- | ——– | —- |<br>| 1    | IT001001 | 150  |<br>| 2    | MN001001 | 51   |<br>| 3    | JZ001001 | 50   |<br>| 4    | GH001001 | 36   |</p>
<h4 id="unix时间戳变为unix日期时间戳"><a href="#unix时间戳变为unix日期时间戳" class="headerlink" title="unix时间戳变为unix日期时间戳"></a>unix时间戳变为unix日期时间戳</h4><p>我们可以直接／ 然后＋，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var timeStamp = 1468857334;</div><div class="line">timeStamp = timeStamp - (timeStamp + 8*60*60)%(24*60*60);</div></pre></td></tr></table></figure></p>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1468800000</div></pre></td></tr></table></figure></p>
<p>也可以使用postgresql的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var timeStamp = 1468857334;</div><div class="line">extract(epoch from (date_trunc(&apos;day&apos;, to_TIMESTAMP(timeStamp))));</div></pre></td></tr></table></figure></p>
<p>结果：<br>| date_part  |<br>| :——–: |<br>| 1468771200 |</p>
<h5 id="postgre-函数详解"><a href="#postgre-函数详解" class="headerlink" title="postgre 函数详解"></a>postgre 函数详解</h5><h6 id="to-timeStamp-把UNIX纪元转换成时间戳"><a href="#to-timeStamp-把UNIX纪元转换成时间戳" class="headerlink" title="to_timeStamp //把UNIX纪元转换成时间戳"></a>to_timeStamp //把UNIX纪元转换成时间戳</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select to_timestamp(1468857334)</div></pre></td></tr></table></figure>
<p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">2016-07-18 23:55:34+08</div></pre></td></tr></table></figure></p>
<h6 id="date-trunc-截断成指定精度"><a href="#date-trunc-截断成指定精度" class="headerlink" title="date_trunc //截断成指定精度"></a>date_trunc //截断成指定精度</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select date_trunc(&apos;day&apos;, timestamp &apos;2016-07-18 23:55:34+08&apos;);</div></pre></td></tr></table></figure>
<p>结果：<br>|     date_trunc      |<br>| :—————–: |<br>| 2016-07-18 00:00:00 |</p>
<h6 id="extract-获取子域"><a href="#extract-获取子域" class="headerlink" title="extract  //获取子域"></a>extract  //获取子域</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">select extract(epoch from timestamp&apos;2016-07-18 00:00:00&apos;);</div></pre></td></tr></table></figure>
<p>结果：<br>| date_part  |<br>| :——–: |<br>| 1468800000 |</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js里repeat的使用]]></title>
      <url>https://yujintang.github.io/2016/07/17/js%E9%87%8Crepeat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="js-里面如何实现一个str的重复"><a href="#js-里面如何实现一个str的重复" class="headerlink" title="js 里面如何实现一个str的重复"></a>js 里面如何实现一个str的重复</h4><h5 id="先介绍第一个方法："><a href="#先介绍第一个方法：" class="headerlink" title="先介绍第一个方法："></a>先介绍第一个方法：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(&apos;abc&apos;).repeat(3) //3为重复次数</div><div class="line">&apos;abcabcabc&apos;</div></pre></td></tr></table></figure>
<p>repeat实现方法如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.repeat = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Array</span>(n+<span class="number">1</span>).join(<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h5 id="第二种方法，直接使用源码内容"><a href="#第二种方法，直接使用源码内容" class="headerlink" title="第二种方法，直接使用源码内容"></a>第二种方法，直接使用源码内容</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">new Array(3+1).join(&apos;abc&apos;) //3为重复次数</div><div class="line">&apos;abcabcabc&apos;</div></pre></td></tr></table></figure>
<p>new Array():<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var myArray = new Array(n) //创建一个长度为n的数组，可扩展长度</div></pre></td></tr></table></figure></p>
<p>join()方法：将数组放入一个字符串，join里面参数为分隔符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; arr = [&apos;a&apos;,&apos;b&apos;,&apos;c&apos;,&apos;d&apos;]</div><div class="line">[ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos; ]</div><div class="line">&gt; arr.join(&apos;&apos;)</div><div class="line">&apos;abcd&apos;</div><div class="line">&gt; arr.join(&apos;,&apos;)</div><div class="line">&apos;a,b,c,d&apos;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js 多重循环break]]></title>
      <url>https://yujintang.github.io/2016/07/12/js-%E5%A4%9A%E9%87%8D%E5%BE%AA%E7%8E%AFbreak/</url>
      <content type="html"><![CDATA[<h4 id="多重跳转break问题"><a href="#多重跳转break问题" class="headerlink" title="多重跳转break问题"></a>多重跳转break问题</h4><p>给for循环命名，break 后面跟名字，就会跳出该层循环。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">outer:</div><div class="line">    for(let i = 0; i&lt;= 6; i++) &#123;</div><div class="line">    for(let j = 0; j&lt;= 10; j++) &#123;</div><div class="line">        if(j == 2) &#123;</div><div class="line">            break outer;</div><div class="line">        &#125;</div><div class="line">        console.log(&apos;i=&apos; + i + &apos;; j = &apos; + j);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>#####结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">i=0; j = 0</div><div class="line">i=0; j = 1</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[v8debug is not defined问题]]></title>
      <url>https://yujintang.github.io/2016/07/09/v8debug-is-not-defined%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="v8debug-is-not-defined"><a href="#v8debug-is-not-defined" class="headerlink" title="v8debug is not defined"></a>v8debug is not defined</h3><p><em>Node 升级到6.2.2后，使用webstorm会报这个错误，下面是解决方案</em><br><img src="v8Debug1.png" alt="修改内容"><br>在Node parameters 下填写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--expose_debug_as=v8debug</div></pre></td></tr></table></figure></p>
<h3 id="Error-Module-version-mismatch-Expected-问题"><a href="#Error-Module-version-mismatch-Expected-问题" class="headerlink" title="Error: Module version mismatch. Expected 问题"></a>Error: Module version mismatch. Expected 问题</h3><p><em>升级Node后，有些项目会报这个错误，直接更新一下模块就好</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rm -rf node_modules/</div><div class="line">$ npm update</div></pre></td></tr></table></figure></p>
<h3 id="n模块版本管理"><a href="#n模块版本管理" class="headerlink" title="n模块版本管理"></a>n模块版本管理</h3><p><em>还有就是一些框架不支持Node最新版本，使用n模块进行Nodejs版本管理是个不错的方法</em><br>1.安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo npm install -g n</div></pre></td></tr></table></figure></p>
<p>2.查看现有版本  (可以上下键选择版本号)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ n</div></pre></td></tr></table></figure></p>
<p>3.安装其它版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo n 4.4.7</div></pre></td></tr></table></figure></p>
<p>4.安装稳定版或最新版<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo n stable 	//稳定版</div><div class="line">$ sudo n latest  	//最新版</div></pre></td></tr></table></figure></p>
<p>5.删除某个版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ n rm 4.4.7</div></pre></td></tr></table></figure></p>
<p>6.指定某个版本执行脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">n use 4.4.7 app.js</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mkdir -p 参数的作用]]></title>
      <url>https://yujintang.github.io/2016/07/04/mkdir-p-%E5%8F%82%E6%95%B0%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="mkdir-p-的作用"><a href="#mkdir-p-的作用" class="headerlink" title="mkdir -p 的作用"></a>mkdir -p 的作用</h4><p><strong>mkdir的-p选项允许你一次性创建多层次的目录，而不是一次只创建单独的目录</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p test/&#123;a,b,c,d&#125;/date</div></pre></td></tr></table></figure></p>
<p>这样，就在test 下创建了四个文件下，并且每个文件夹下都有了date文件</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ssh超时处理]]></title>
      <url>https://yujintang.github.io/2016/06/28/ssh%E8%B6%85%E6%97%B6%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="ssh处理超时连接"><a href="#ssh处理超时连接" class="headerlink" title="ssh处理超时连接"></a>ssh处理超时连接</h3><p><em>ssh远程连接，经常会发生一些超时的情况，调整ssh的两个配置内容，就可以讲自动超时问题解决</em></p>
<h4 id="编辑ssh配置文件"><a href="#编辑ssh配置文件" class="headerlink" title="编辑ssh配置文件"></a>编辑ssh配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/ssh/sshd_config</div></pre></td></tr></table></figure>
<h4 id="修改配置内容"><a href="#修改配置内容" class="headerlink" title="修改配置内容"></a>修改配置内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ClientAliveInterval 0</div><div class="line">#ClientAliveCountMax 3</div><div class="line"></div><div class="line">修改为：</div><div class="line"></div><div class="line">ClientAliveInterval 60 //服务器端向客户的发送监测是否活跃消息的时间间隔</div><div class="line">ClientAliveCountMax 3  //服务器可接受的客户端未响应次数</div></pre></td></tr></table></figure>
<h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><blockquote>
<p>os x<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist </div><div class="line">sudo launchctl load /System/Library/LaunchDaemons/ssh.plist</div></pre></td></tr></table></figure></p>
<p>linux<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service sshd restart</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[服务器互相验证－authorized_keys]]></title>
      <url>https://yujintang.github.io/2016/06/28/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BA%92%E7%9B%B8%E9%AA%8C%E8%AF%81%EF%BC%8Dauthorized-keys/</url>
      <content type="html"><![CDATA[<h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><strong>在使用ssh 登陆 阿里云服务器时候，每次都会出现 要求输入用户密码的时候，使用authorized_keys  互相验证，可解决这个问题</strong></p>
<h4 id="1-在本地创建ssh密钥："><a href="#1-在本地创建ssh密钥：" class="headerlink" title="1.在本地创建ssh密钥："></a>1.在本地创建ssh密钥：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 	ssh-keygen -t rsa -C &quot;shanquan54@163.com&quot;</div></pre></td></tr></table></figure>
<h4 id="2-将本地公钥复制到远程服务器上"><a href="#2-将本地公钥复制到远程服务器上" class="headerlink" title="2.将本地公钥复制到远程服务器上"></a>2.将本地公钥复制到远程服务器上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ 	scp id_rsa.pub root@120.27.115.24:~/.ssh/authorized_keys</div></pre></td></tr></table></figure>
<h4 id="3-这样，就可以无密码访问远程服务器了，如果有多个，以追加方式-写入authorized-keys"><a href="#3-这样，就可以无密码访问远程服务器了，如果有多个，以追加方式-写入authorized-keys" class="headerlink" title="3.这样，就可以无密码访问远程服务器了，如果有多个，以追加方式 写入authorized_keys"></a>3.这样，就可以无密码访问远程服务器了，如果有多个，以追加方式 写入authorized_keys</h4><h4 id="4-如果还是不可以，就需要对远程-ssh-修改权限，和恢复文件的安全上下文"><a href="#4-如果还是不可以，就需要对远程-ssh-修改权限，和恢复文件的安全上下文" class="headerlink" title="4.如果还是不可以，就需要对远程.ssh 修改权限，和恢复文件的安全上下文"></a>4.如果还是不可以，就需要对远程.ssh 修改权限，和恢复文件的安全上下文</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ 	chmod 700 /root/.ssh</div><div class="line">	chmod 600 /root/.ssh/authorized_keys</div><div class="line">	restorecon -R -v /root/.ssh</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[makedown使用]]></title>
      <url>https://yujintang.github.io/2016/06/24/makedown%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="makedown-语法"><a href="#makedown-语法" class="headerlink" title="makedown 语法"></a>makedown 语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">1. 分段： 两个回车</div><div class="line">2. 换行 两个空格 + 回车</div><div class="line">3. 标题 #~###### 井号的个数表示几级标题，即Markdown可以表示一级标题到六级标题</div><div class="line">4. 引用 &gt;</div><div class="line">5. 列表 *，+，-，1.，选其中之一，注意后面有个空格</div><div class="line">6. 代码区块 四个空格开头</div><div class="line">7. 链接 [文字](链接地址)</div><div class="line">8. 图片 ![图片说明](图片地址)，图片地址可以是本地路劲，也可以是网络地址</div><div class="line">9. 强调 **文字**，__文字__，_文字_，*文字*</div><div class="line">10. 代码 ```，``</div></pre></td></tr></table></figure>
<h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><blockquote>
<p>推荐typora  <strong><em>[下载地址] (<a href="http://www.typora.io/" target="_blank" rel="external">http://www.typora.io/</a>)</em></strong></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[moment当日零点时间戳问题]]></title>
      <url>https://yujintang.github.io/2016/06/24/moment%E5%BD%93%E6%97%A5%E9%9B%B6%E7%82%B9%E6%97%B6%E9%97%B4%E6%88%B3%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="moment-js-获取零点时间戳"><a href="#moment-js-获取零点时间戳" class="headerlink" title="moment.js 获取零点时间戳"></a>moment.js 获取零点时间戳</h2><blockquote>
<p><a href="http://momentjs.cn/docs/" target="_blank" rel="external">moment 官方网站</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">let now = moment().format(&apos;YYYY-MM-DD&apos;);</div><div class="line">let zero = moment(now).format(&apos;YYYY-MM-DD HH:mm:ss&apos;);</div><div class="line">let today = moment(zero).toDate().getTime();</div><div class="line">let yesterday = moment(today).subtract(1, &apos;days&apos;).format(&apos;x&apos;);</div></pre></td></tr></table></figure></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sequelize的基本使用]]></title>
      <url>https://yujintang.github.io/2016/06/20/sequelize%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://docs.sequelizejs.com/en/latest/" target="_blank" rel="external">sequelize官方文档</a><br><a href="http://itbilu.com/nodejs/npm/VkYIaRPz-.html" target="_blank" rel="external">参考文章1</a><br><a href="http://itbilu.com/nodejs/npm/V1PExztfb.html" target="_blank" rel="external">参考文章2</a><br><a href="http://itbilu.com/nodejs/npm/41qaV3czb.html" target="_blank" rel="external">参考文章3</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install sequelize --save</div></pre></td></tr></table></figure>
</blockquote>
<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>启动一个事物，可以在多个数据库操作时具有失败会滚效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sequelize.transaction(function (t) &#123; </div><div class="line">  // 注意，这时使用的是callback而不是promise.then()</div><div class="line">  return User.find(..., &#123; transaction: t&#125;).then(function (user) &#123;</div><div class="line">    return user.updateAttributes(..., &#123; transaction: t&#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;).then(function () &#123;</div><div class="line">  // Committed</div><div class="line">&#125;).catch(function (err) &#123;</div><div class="line">  // Rolled back</div><div class="line">  console.error(err);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>过滤语法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">where:判断的字段  attributes:返回的内容 include: 多表 limit:返回最大个数 offset:忽略前几条数据</div></pre></td></tr></table></figure></p>
<h5 id="findAll查询多条数据，返回数组"><a href="#findAll查询多条数据，返回数组" class="headerlink" title="findAll查询多条数据，返回数组"></a>findAll查询多条数据，返回数组</h5><blockquote>
<p>相关：findOne 查找单挑数据，findById 根据id查找，count 统计个数， findAndCount 返回rows和count<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Model.findAll(&#123;</div><div class="line">  where: &#123;</div><div class="line">    attr1: 42,</div><div class="line">    attr2: &apos;cake&apos;</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">// WHERE attr1 = 42 AND attr2 = &apos;cake&apos;</div></pre></td></tr></table></figure></p>
</blockquote>
<p>#####save 保存某条数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure></p>
<h4 id="创建一个持久化的对象"><a href="#创建一个持久化的对象" class="headerlink" title="创建一个持久化的对象"></a>创建一个持久化的对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Task.create(&#123; title: <span class="string">'foo'</span>, description: <span class="string">'bar'</span>, deadline: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">task</span>) </span>&#123;</div><div class="line">  <span class="comment">// 这里可以通过task参数访问新创建的task对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="修改保存一个持久化对象"><a href="#修改保存一个持久化对象" class="headerlink" title="修改保存一个持久化对象"></a>修改保存一个持久化对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对task对象赋值，然后调用save方法，fields说明参与修改的字段</span></div><div class="line">task.title = <span class="string">'foooo'</span></div><div class="line">task.description = <span class="string">'baaaaaar'</span></div><div class="line">task.save(&#123;fields: [<span class="string">'title'</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// title变成'foooo'，但是description没有变化</span></div><div class="line">&#125;)</div><div class="line"> </div><div class="line"><span class="comment">// 对task对象调用update方法，参数1中说明需要修改的字段， 参数2的fields说明参与修改的字段</span></div><div class="line">task.update(&#123; title: <span class="string">'foooo'</span>, description: <span class="string">'baaaaaar'</span>&#125;, &#123;fields: [<span class="string">'title'</span>]&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// title变成'foooo'，但是description没有变化</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Task.create(&#123; title: <span class="string">'a task'</span> &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">task</span>) </span>&#123;</div><div class="line">  <span class="comment">// now you see me...</span></div><div class="line">  <span class="keyword">return</span> task.destroy();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"> <span class="comment">// now i'm gone :)</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>如果paranoid配置为true，不会产生真正的删除，而是在deletedAt字段上标记当前的时间戳，可以用task.destroy({ force: true })强制删除</p>
</blockquote>
<h4 id="批量创建"><a href="#批量创建" class="headerlink" title="批量创建"></a>批量创建</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">User.bulkCreate([</div><div class="line">  &#123; username: <span class="string">'barfooz'</span>, isAdmin: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; username: <span class="string">'foo'</span>, isAdmin: <span class="literal">true</span> &#125;,</div><div class="line">  &#123; username: <span class="string">'bar'</span>, isAdmin: <span class="literal">false</span> &#125;</div><div class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123; <span class="comment">// 注意：官方文档提示这里没有返回结果，如果要获取返回结果需要重新查询，实际使用时在PostgreSQL中能返回创建的结果集，估计只有支持returning的数据库才有返回值：</span></div><div class="line">  <span class="keyword">return</span> User.findAll();</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(users)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="一次性修改多条记录"><a href="#一次性修改多条记录" class="headerlink" title="一次性修改多条记录"></a>一次性修改多条记录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Task.update(</div><div class="line">    &#123; status: <span class="string">'inactive'</span> &#125;, <span class="comment">/* set attributes' value */</span>,</div><div class="line">    &#123; where: &#123; subject: <span class="string">'programming'</span> &#125;&#125; <span class="comment">/* where criteria */</span></div><div class="line">  ).spread(<span class="function"><span class="keyword">function</span>(<span class="params">affectedCount, affectedRows</span>) </span>&#123;</div><div class="line">  <span class="comment">// .update返回一个包含affectedCount和affectedRows的数组，所以需要使用spread进行</span></div><div class="line">  <span class="comment">// affectedRows只有支持returning: true的数据库才起作用</span></div><div class="line"></div><div class="line">  <span class="comment">// affectedCount will be 2</span></div><div class="line">  <span class="keyword">return</span> Task.findAll();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="一次性删除多条记录"><a href="#一次性删除多条记录" class="headerlink" title="一次性删除多条记录"></a>一次性删除多条记录</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Task.destroy(&#123;</div><div class="line">    where: &#123;</div><div class="line">      subject: <span class="string">'programming'</span></div><div class="line">    &#125;,</div><div class="line">    truncate: <span class="literal">true</span> <span class="comment">/* 此时会忽略where条件，执行truncate操作，慎用！ */</span></div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">affectedRows</span>) </span>&#123;</div><div class="line">  <span class="comment">// affectedRows will be 2</span></div><div class="line">  <span class="keyword">return</span> Task.findAll();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="原始SQL查询"><a href="#原始SQL查询" class="headerlink" title="原始SQL查询"></a>原始SQL查询</h4><p><a href="http://sequelize.readthedocs.io/en/latest/docs/raw-queries/" target="_blank" rel="external">官方参考</a></p>
<p>通过sequelize.query方法执行原始的SQL语句：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">"SELECT * FROM `users`"</span>, &#123; type: sequelize.QueryTypes.SELECT&#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">users</span>) </span>&#123;</div><div class="line">    <span class="comment">// 返回user的数组</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>如果第二个参数传递了一个Model，返回结果会变成这个Model的对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects'</span>, &#123; model: Projects &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>)</span>&#123;</div><div class="line">  <span class="comment">// projects数组中每个都是Project的对象</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>使用replacements传递SQL中的参数，有2种方式： 有名字的参数（：开头，推荐使用）和无名字的参数（？）</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects WHERE status = ?'</span>,</div><div class="line">  &#123; replacements: [<span class="string">'active'</span>], type: sequelize.QueryTypes.SELECT &#125;</div><div class="line">).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(projects)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">sequelize.query(<span class="string">'SELECT * FROM projects WHERE status = :status '</span>,</div><div class="line">  &#123; replacements: &#123; status: <span class="string">'active'</span> &#125;, type: sequelize.QueryTypes.SELECT &#125;</div><div class="line">).then(<span class="function"><span class="keyword">function</span>(<span class="params">projects</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(projects)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[post传递数组问题]]></title>
      <url>https://yujintang.github.io/2016/06/20/post%E4%BC%A0%E9%80%92%E6%95%B0%E7%BB%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>###前端post方法传递数组<br>前端post方法传递数组arr时候，会出现后端接受到后数组名变为arr[]，解决方法如下：</p>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">  url: &apos;c/info_nickname.do&apos;,</div><div class="line">  data: JSON.stringify(&#123;nickname: &apos;ABC&apos;, a: [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&#125;),</div><div class="line">  success: function(result)&#123;console.log(result)&#125;,</div><div class="line">  dataType: &apos;json&apos;,</div><div class="line">  type: &apos;POST&apos;,</div><div class="line">  contentType: &apos;application/json&apos;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[lodash基本使用]]></title>
      <url>https://yujintang.github.io/2016/06/20/lodash%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p><a href="http://lodashjs.com/docs/" target="_blank" rel="external">参考地址</a></p>
</blockquote>
<hr>
<h3 id="merge-合并对象"><a href="#merge-合并对象" class="headerlink" title="_.merge    合并对象"></a>_.merge    合并对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">var users = &#123;</div><div class="line">  &apos;data&apos;: [&#123; &apos;user&apos;: &apos;barney&apos; &#125;, &#123; &apos;user&apos;: &apos;fred&apos; &#125;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var ages = &#123;</div><div class="line">  &apos;data&apos;: [&#123; &apos;age&apos;: 36 &#125;, &#123; &apos;age&apos;: 40 &#125;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.merge(users, ages);</div><div class="line">// =&gt; &#123; &apos;data&apos;: [&#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36 &#125;, &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;] &#125;</div><div class="line"></div><div class="line">// using a customizer callback</div><div class="line">var object = &#123;</div><div class="line">  &apos;fruits&apos;: [&apos;apple&apos;],</div><div class="line">  &apos;vegetables&apos;: [&apos;beet&apos;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">var other = &#123;</div><div class="line">  &apos;fruits&apos;: [&apos;banana&apos;],</div><div class="line">  &apos;vegetables&apos;: [&apos;carrot&apos;]</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.merge(object, other, function(a, b) &#123;</div><div class="line">  if (_.isArray(a)) &#123;</div><div class="line">    return a.concat(b);</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line">// =&gt; &#123; &apos;fruits&apos;: [&apos;apple&apos;, &apos;banana&apos;], &apos;vegetables&apos;: [&apos;beet&apos;, &apos;carrot&apos;] &#125;</div></pre></td></tr></table></figure>
<h3 id="omit-从对象中删除某个属性"><a href="#omit-从对象中删除某个属性" class="headerlink" title="_.omit  从对象中删除某个属性"></a>_.omit  从对象中删除某个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;;</div><div class="line"></div><div class="line">_.omit(object, &apos;age&apos;);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div><div class="line"></div><div class="line">_.omit(object, _.isNumber);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div></pre></td></tr></table></figure>
<h3 id="pick-从对象中增加某个属性"><a href="#pick-从对象中增加某个属性" class="headerlink" title="_.pick 从对象中增加某个属性"></a>_.pick 从对象中增加某个属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;user&apos;: &apos;fred&apos;, &apos;age&apos;: 40 &#125;;</div><div class="line"></div><div class="line">_.pick(object, &apos;user&apos;);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div><div class="line"></div><div class="line">_.pick(object, _.isString);</div><div class="line">// =&gt; &#123; &apos;user&apos;: &apos;fred&apos; &#125;</div></pre></td></tr></table></figure>
<h3 id="set-设置对象的某个属性值"><a href="#set-设置对象的某个属性值" class="headerlink" title="_.set  设置对象的某个属性值"></a>_.set  设置对象的某个属性值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var object = &#123; &apos;a&apos;: [&#123; &apos;b&apos;: &#123; &apos;c&apos;: 3 &#125; &#125;] &#125;;</div><div class="line"></div><div class="line">_.set(object, &apos;a[0].b.c&apos;, 4);</div><div class="line">console.log(object.a[0].b.c);</div><div class="line">// =&gt; 4</div><div class="line"></div><div class="line">_.set(object, &apos;x[0].y.z&apos;, 5);</div><div class="line">console.log(object.x[0].y.z);</div><div class="line">// =&gt; 5</div></pre></td></tr></table></figure>
<h3 id="cloneDeep-深度克隆"><a href="#cloneDeep-深度克隆" class="headerlink" title="_.cloneDeep    深度克隆"></a>_.cloneDeep    深度克隆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var objA = &#123;</div><div class="line">	&quot;name&quot;: &quot;colin&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Normal method? Too long. See Stackoverflow for solution: http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript</div><div class="line"></div><div class="line">// Lodash</div><div class="line">var objB = _.cloneDeep(objA);</div><div class="line">objB === objA // false</div></pre></td></tr></table></figure>
<h3 id="findKey-选择查找属性"><a href="#findKey-选择查找属性" class="headerlink" title="_.findKey    选择查找属性"></a>_.findKey    选择查找属性</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">var users = &#123;</div><div class="line">  &apos;barney&apos;:  &#123; &apos;age&apos;: 36, &apos;active&apos;: true &#125;,</div><div class="line">  &apos;fred&apos;:    &#123; &apos;age&apos;: 40, &apos;active&apos;: false &#125;,</div><div class="line">  &apos;pebbles&apos;: &#123; &apos;age&apos;: 1,  &apos;active&apos;: true &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">_.findKey(users, function(chr) &#123;</div><div class="line">  return chr.age &lt; 40;</div><div class="line">&#125;);</div><div class="line">// =&gt; &apos;barney&apos; (iteration order is not guaranteed)</div><div class="line"></div><div class="line">// using the `_.matches` callback shorthand</div><div class="line">_.findKey(users, &#123; &apos;age&apos;: 1, &apos;active&apos;: true &#125;);</div><div class="line">// =&gt; &apos;pebbles&apos;</div><div class="line"></div><div class="line">// using the `_.matchesProperty` callback shorthand</div><div class="line">_.findKey(users, &apos;active&apos;, false);</div><div class="line">// =&gt; &apos;fred&apos;</div><div class="line"></div><div class="line">// using the `_.property` callback shorthand</div><div class="line">_.findKey(users, &apos;active&apos;);</div><div class="line">// =&gt; &apos;barney&apos;</div></pre></td></tr></table></figure>
<h3 id="transform-返回一个修改后的对象"><a href="#transform-返回一个修改后的对象" class="headerlink" title="_.transform 返回一个修改后的对象"></a>_.transform 返回一个修改后的对象</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">_.transform([2, 3, 4], function(result, n) &#123;</div><div class="line">  result.push(n *= n);</div><div class="line">  return n % 2 == 0;</div><div class="line">&#125;);</div><div class="line">// =&gt; [4, 9]</div><div class="line"></div><div class="line">_.transform(&#123; &apos;a&apos;: 1, &apos;b&apos;: 2 &#125;, function(result, n, key) &#123;</div><div class="line">  result[key] = n * 3;</div><div class="line">&#125;);</div><div class="line">// =&gt; &#123; &apos;a&apos;: 3, &apos;b&apos;: 6 &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
  
  
</search>
